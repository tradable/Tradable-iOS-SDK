// Generated by Apple Swift version 2.1.1 (swiftlang-700.1.101.15 clang-700.1.81)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if defined(__has_include) && __has_include(<uchar.h>)
# include <uchar.h>
#elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
#endif

typedef struct _NSZone NSZone;

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted) 
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
#endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
#if defined(__has_feature) && __has_feature(modules)
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"

@interface NSNumber (SWIFT_EXTENSION(TradableAPI))
@end

@class UIWebView;
@class NSURL;
@class TradableAccount;
enum TradableUpdateType : NSInteger;
enum TradableUpdateFrequency : NSInteger;
@class TradableSymbols;
enum TradableAggregation : NSInteger;
@class TradablePosition;
@class TradableError;
enum TradableSingleProtection : NSInteger;
@class TradableOrder;
@class TradableOrderModification;
@class TradableProtection;
@class TradableAmount;
@class TradableOrderCommand;
@class TradablePrice;
@class TradableCandleRequest;
@class TradableCandles;
@class TradableAccountSnapshot;
@class TradableAccountList;
@class TradableOSUser;
@class TradableInstrument;
@class TradablePositions;
@class TradableOrders;
enum TradableOrderSide : NSInteger;
@protocol TradableOrderEntryDelegate;
@class UIViewController;
@protocol TradableInstrumentSelectorDelegate;
@protocol TradableEditOrderDelegate;
@protocol TradablePositionDetailDelegate;
@protocol TradableAPIDelegate;


/// The Tradable object implementing the singleton pattern.
SWIFT_CLASS("_TtC11TradableAPI8Tradable")
@interface Tradable : NSObject

/// TradableAPI delegate for hooking into update responses.
@property (nonatomic, weak) id <TradableAPIDelegate> __nullable delegate;

/// The current user of Tradable OS. May have multiple trading accounts with one or more brokers.
@property (nonatomic, weak) TradableOSUser * __nullable currentOsUser;

/// A singleton object used to invoke API methods on.
+ (Tradable * __nonnull)sharedInstance;

/// Begins authentication flow for Tradable; if webView is not specified, it opens a system browser in order to authorize. It should be the first call made to TradableAPI.
///
/// \param appId OAuth flow client ID.
///
/// \param uri OAuth flow redirect URL.
///
/// \param webView Optional UIWebView component used to open login website. If not specified, system browser will be opened.
+ (void)authenticateWithAppIdAndUri:(uint64_t)appId uri:(NSString * __nonnull)uri webView:(UIWebView * __nullable)webView;

/// Tells the API to activate with URL containing access token. Should be called when system browser opens the application using TradableAPI. When the access token is successfully created, tradableReady delegate method is called.
///
/// \param url URL containing information needed in order to create access token.
- (void)activateAfterLaunchWithURL:(NSURL * __nonnull)url;

/// Starts updates for specified account after stopping previous updates.
///
/// \param forAccount The account for which the updates should be started.
///
/// \param updateType The type of updates.
///
/// \param frequency The frequency of the updates.
///
/// \param symbols An optional list of symbols for which the updates should be started. Should be specified for full updates and price updates.
- (void)startUpdates:(TradableAccount * __nonnull)forAccount updateType:(enum TradableUpdateType)updateType frequency:(enum TradableUpdateFrequency)frequency symbols:(TradableSymbols * __nullable)symbols;

/// Set symbols for updates.
///
/// \param symbols The symbols that should be used in updates. Replaces the previous list of symbols that was in use. May be set before or after starting the updates.
- (void)setSymbolsForUpdates:(TradableSymbols * __nonnull)symbols;

/// Stops updates and clears symbol list.
- (void)stopUpdates;

/// Starts candle updates for specified account after stopping previous updates.
///
/// \param forAccount The account for which the updates should be started.
///
/// \param symbol The symbol for which the updates should be started.
///
/// \param aggregation The aggregation for which the updates should be started.
///
/// \param from Unix timestamp in milliseconds, specifies since when should the candles be requested. Cannot be greater than the current timestamp.
- (void)startCandleUpdates:(TradableAccount * __nonnull)forAccount symbol:(NSString * __nonnull)symbol aggregation:(enum TradableAggregation)aggregation from:(uint64_t)from;

/// Stops candle updates.
- (void)stopCandleUpdates;

/// Cancels protections.
///
/// \param forAccount The account for which the protections should be cancelled.
///
/// \param forPosition The position for which the protections should be cancelled.
///
/// \param completion The closure to be called when the response comes back, with optional TradableError object.
- (void)cancelProtections:(TradableAccount * __nonnull)forAccount forPosition:(TradablePosition * __nonnull)forPosition completion:(void (^ __null_unspecified)(TradableError * __nullable))completion;

/// Cancels single protection.
///
/// \param forAccount The account for which the protections should be cancelled.
///
/// \param forPosition The position for which the protections should be cancelled.
///
/// \param protection The type of protection that should be cancelled.
///
/// \param completion The closure to be called when the response comes back, with optional TradableError object.
- (void)cancelSingleProtection:(TradableAccount * __nonnull)forAccount forPosition:(TradablePosition * __nonnull)forPosition protection:(enum TradableSingleProtection)protection completion:(void (^ __null_unspecified)(TradableError * __nullable))completion;

/// Closes all positions.
///
/// \param forAccount The account for which the positions should be closed.
///
/// \param completion The closure to be called when the response comes back, with optional TradableError object.
- (void)closeAllPositions:(TradableAccount * __nonnull)forAccount completion:(void (^ __null_unspecified)(TradableError * __nullable))completion;

/// Closes position.
///
/// \param forAccount The account for which the position should be closed.
///
/// \param forPosition The position that should be closed.
///
/// \param completion The closure to be called when the response comes back, with optional TradableError object.
- (void)closePosition:(TradableAccount * __nonnull)forAccount forPosition:(TradablePosition * __nonnull)forPosition completion:(void (^ __null_unspecified)(TradableError * __nullable))completion;

/// Cancels order.
///
/// \param forAccount The account for which the order should be cancelled.
///
/// \param forOrder The order that should be cancelled.
///
/// \param completion The closure to be called when the response comes back, with optional TradableError object.
- (void)cancelOrder:(TradableAccount * __nonnull)forAccount forOrder:(TradableOrder * __nonnull)forOrder completion:(void (^ __null_unspecified)(TradableError * __nullable))completion;

/// Adds or modifies single protection.
///
/// \param forAccount The account for which the protection should be added or modified.
///
/// \param forPosition The position for which the protection should be added or modified.
///
/// \param protection The type of protection that should be added or modified.
///
/// \param orderModification The order modification object containing the changes to be made to a protection.
///
/// \param completion The closure to be called when the response comes back, with optional TradableError object.
- (void)modifySingleProtection:(TradableAccount * __nonnull)forAccount forPosition:(TradablePosition * __nonnull)forPosition protection:(enum TradableSingleProtection)protection orderModification:(TradableOrderModification * __nonnull)orderModification completion:(void (^ __null_unspecified)(TradableError * __nullable))completion;

/// Adds or modifies protections.
///
/// \param forAccount The account for which the protections should be added or modified.
///
/// \param forPosition The position for which the protections should be added or modified.
///
/// \param protection The protection object containing the changes to be made to protections.
///
/// \param completion The closure to be called when the response comes back, with optional TradableError object.
- (void)modifyProtections:(TradableAccount * __nonnull)forAccount forPosition:(TradablePosition * __nonnull)forPosition protection:(TradableProtection * __nonnull)protection completion:(void (^ __null_unspecified)(TradableError * __nullable))completion;

/// Reduces position size to specified amount.
///
/// \param forAccount The account for which the position size should be reduced.
///
/// \param forPosition The position whose size should be reduced.
///
/// \param newAmount The amount that the position size should be reduced to.
///
/// \param completion The closure to be called when the response comes back, with optional TradableError object.
- (void)reducePositionSize:(TradableAccount * __nonnull)forAccount forPosition:(TradablePosition * __nonnull)forPosition newAmount:(TradableAmount * __nonnull)newAmount completion:(void (^ __null_unspecified)(TradableError * __nullable))completion;

/// Modifies order.
///
/// \param forAccount The account for which the order should be modified.
///
/// \param forOrder The order that should be modified.
///
/// \param orderModification The order modification object containing the changes to be made to an order.
///
/// \param completion The closure to be called when the response comes back, with optional TradableError object.
- (void)modifyOrder:(TradableAccount * __nonnull)forAccount forOrder:(TradableOrder * __nonnull)forOrder orderModification:(TradableOrderModification * __nonnull)orderModification completion:(void (^ __null_unspecified)(TradableError * __nullable))completion;

/// Issues new order.
///
/// \param forAccount The account for which the order should be issued.
///
/// \param orderCommand The order command object, containing information about the order that should be issued.
///
/// \param completion The closure to be called when the response comes back, with optional TradableOrder object and optional TradableError object.
- (void)issueNewOrder:(TradableAccount * __nonnull)forAccount orderCommand:(TradableOrderCommand * __nonnull)orderCommand completion:(void (^ __null_unspecified)(TradableOrder * __nullable, TradableError * __nullable))completion;

/// Gets prices.
///
/// \param forAccount The account for which the prices should be fetched.
///
/// \param symbols The symbols for which the prices should be fetched.
///
/// \param completion The closure to be called when the response comes back, with optional array of TradablePrice objects and optional TradableError object.
- (void)getPrices:(TradableAccount * __nonnull)forAccount symbols:(TradableSymbols * __nonnull)symbols completion:(void (^ __null_unspecified)(NSArray<TradablePrice *> * __nullable, TradableError * __nullable))completion;

/// Gets candles.\Remark 
///
/// This method is recursive.
///
/// \param forAccount The account for which the candles should be fetched.
///
/// \param candleRequest The candle request object containing information about the candles that should be fetched.
///
/// \param completion The closure to be called when the response comes back, with optional TradableCandles object and optional TradableError object.
- (void)getCandles:(TradableAccount * __nonnull)forAccount candleRequest:(TradableCandleRequest * __nonnull)candleRequest completion:(void (^ __null_unspecified)(TradableCandles * __nullable, TradableError * __nullable))completion;

/// Gets a snapshot of the account.
///
/// \param forAccount The account for which the snapshot should be fetched.
///
/// \param symbols The symbols for which the snapshot should be fetched.
///
/// \param completion The closure to be called when the response comes back, with optional TradableAccountSnapshot object and optional TradableError object.
- (void)getAccountSnapshot:(TradableAccount * __nonnull)forAccount symbols:(TradableSymbols * __nonnull)symbols completion:(void (^ __null_unspecified)(TradableAccountSnapshot * __nullable, TradableError * __nullable))completion;

/// Gets available accounts.
///
/// \param completion The closure to be called when the response comes back, with optional TradableAccountList object and optional TradableError object.
- (void)getAvailableAccounts:(void (^ __null_unspecified)(TradableAccountList * __nullable, TradableError * __nullable))completion;

/// Gets the current OS user.
///
/// \param completion The closure to be called when the response comes back, with optional TradableOSUser object and optional TradableError object.
- (void)getCurrentUser:(void (^ __null_unspecified)(TradableOSUser * __nullable, TradableError * __nullable))completion;

/// Gets instruments.
///
/// \param forAccount The account for which the instruments should be fetched.
///
/// \param completion The closure to be called when the response comes back, with optional array of TradableInstrument objects and optional TradableError object.
- (void)getInstruments:(TradableAccount * __nonnull)forAccount completion:(void (^ __null_unspecified)(NSArray<TradableInstrument *> * __nullable, TradableError * __nullable))completion;

/// Gets position by ID.
///
/// \param forAccount The account for which the position should be fetched.
///
/// \param positionId The ID of the position that should be fetched.
///
/// \param completion The closure to be called when the response comes back, with optional TradablePosition object and optional TradableError object.
- (void)getPosition:(TradableAccount * __nonnull)forAccount positionId:(NSString * __nonnull)positionId completion:(void (^ __null_unspecified)(TradablePosition * __nullable, TradableError * __nullable))completion;

/// Gets all positions.
///
/// \param forAccount The account for which the positions should be fetched.
///
/// \param completion The closure to be called when the response comes back, with optional TradablePositions object and optional TradableError object.
- (void)getPositions:(TradableAccount * __nonnull)forAccount completion:(void (^ __null_unspecified)(TradablePositions * __nullable, TradableError * __nullable))completion;

/// Get open positions.
///
/// \param forAccount The account for which the open positions should be fetched.
///
/// \param completion The closure to be called when the response comes back, with optional array of TradablePosition objects and optional TradableError object.
- (void)getOpenPositions:(TradableAccount * __nonnull)forAccount completion:(void (^ __null_unspecified)(NSArray<TradablePosition *> * __nullable, TradableError * __nullable))completion;

/// Gets order by ID.
///
/// \param forAccount The account for which the order should be fetched.
///
/// \param orderId The ID of the order that should be fetched.
///
/// \param completion The closure to be called when the response comes back, with optional TradableOrder object and optional TradableError object.
- (void)getOrder:(TradableAccount * __nonnull)forAccount orderId:(NSString * __nonnull)orderId completion:(void (^ __null_unspecified)(TradableOrder * __nullable, TradableError * __nullable))completion;

/// Gets all orders.
///
/// \param forAccount The account for which the orders should be fetched.
///
/// \param completion The closure to be called when the response comes back, with optional TradableOrders object and optional TradableError object.
- (void)getOrders:(TradableAccount * __nonnull)forAccount completion:(void (^ __null_unspecified)(TradableOrders * __nullable, TradableError * __nullable))completion;

/// Gets pending orders.
///
/// \param forAccount The account for which the pending orders should be fetched.
///
/// \param completion The closure to be called when the response comes back, with optional array of TradableOrder objects and optional TradableError object.
- (void)getPendingOrders:(TradableAccount * __nonnull)forAccount completion:(void (^ __null_unspecified)(NSArray<TradableOrder *> * __nullable, TradableError * __nullable))completion;

/// Presents Order Entry widget.
///
/// \param forAccount The account for which the widget should be presented.
///
/// \param symbol An optional, preselected symbol in the widget. If nil, no symbol will be preselected.
///
/// \param side Preselected order side in the widget.
///
/// \param delegate An optional TradableOrderEntryDelegate that will be called when the widget is dismissed.
///
/// \param presentingViewController A view controller that will present the widget.
///
/// \param presentationStyle A style used when presenting the widget.
- (void)presentOrderEntry:(TradableAccount * __nonnull)forAccount symbol:(NSString * __nullable)symbol side:(enum TradableOrderSide)side delegate:(id <TradableOrderEntryDelegate> __nullable)delegate presentingViewController:(UIViewController * __nonnull)presentingViewController presentationStyle:(UIModalPresentationStyle)presentationStyle;

/// Presents Instrument Selector widget.
///
/// \param forAccount The account for which the widget should be presented.
///
/// \param delegate An optional TradableInstrumentSelectorDelegate that will handle the widget dismissal with selected instrument.
///
/// \param presentingViewController A view controller that will present the widget.
///
/// \param presentationStyle A style used when presenting the widget.
- (void)presentInstrumentSelector:(TradableAccount * __nonnull)forAccount delegate:(id <TradableInstrumentSelectorDelegate> __nullable)delegate presentingViewController:(UIViewController * __nonnull)presentingViewController presentationStyle:(UIModalPresentationStyle)presentationStyle;

/// Presents Edit Order widget.
///
/// \param forAccount The account for which the widget should be presented.
///
/// \param order The order whose details will be displayed and which is to be edited.
///
/// \param delegate An optional TradableEditOrderDelegate that will be called when the widget is dismissed.
///
/// \param presentingViewController A view controller that will present the widget.
///
/// \param presentationStyle A style used when presenting the widget.
- (void)presentEditOrder:(TradableAccount * __nonnull)forAccount order:(TradableOrder * __nonnull)order delegate:(id <TradableEditOrderDelegate> __nullable)delegate presentingViewController:(UIViewController * __nonnull)presentingViewController presentationStyle:(UIModalPresentationStyle)presentationStyle;

/// Presents Position Detail widget.
///
/// \param forAccount The account for which the widget should be presented.
///
/// \param position The position whose details will be displayed.
///
/// \param delegate An optional TradablePositionDetailDelegate that will be called when the widget is dismissed.
///
/// \param presentingViewController A view controller that will present the widget.
///
/// \param presentationStyle A style used when presenting the widget.
- (void)presentPositionDetail:(TradableAccount * __nonnull)forAccount position:(TradablePosition * __nonnull)position delegate:(id <TradablePositionDetailDelegate> __nullable)delegate presentingViewController:(UIViewController * __nonnull)presentingViewController presentationStyle:(UIModalPresentationStyle)presentationStyle;
@end

@class TradableAccountMetrics;


/// The delegate protocol for the API. Provides a variety of hooks.
SWIFT_PROTOCOL("_TtP11TradableAPI19TradableAPIDelegate_")
@protocol TradableAPIDelegate
@optional

/// A delegate hook for knowing when the API methods are ready to be used. Called when the access token has been updated.
- (void)tradableReady;

/// A delegate hook for knowing when the account list has been updated.
///
/// \param accounts A TradableAccountList object that contains a list of available accounts.
- (void)tradableAccountListUpdated:(TradableAccountList * __nonnull)accounts;

/// A delegate hook for metrics updates.
///
/// \param metrics A TradableAccountMetrics object that contains information about current account metrics.
- (void)tradableMetricsUpdated:(TradableAccountMetrics * __nonnull)metrics;

/// A delegate hook for orders updates.
///
/// \param orders A TradableOrders object that contains a list of orders.
- (void)tradableOrdersUpdated:(TradableOrders * __nonnull)orders;

/// A delegate hook for positions updates.
///
/// \param positions A TradablePositions object that contains a list of positions.
- (void)tradablePositionsUpdated:(TradablePositions * __nonnull)positions;

/// A delegate hook for prices updates.
///
/// \param prices A list of TradablePrice objects.
- (void)tradablePricesUpdated:(NSArray<TradablePrice *> * __nonnull)prices;

/// A delegate hook for candles updates.
///
/// \param candles A TradableCandles object that contains a list of candles.
- (void)tradableCandlesUpdated:(TradableCandles * __nonnull)candles;

/// A delegate hook for updates error handling.
///
/// \param error A TradableError object that contains detailed information about the error.
- (void)tradableUpdateError:(TradableError * __nonnull)error;
@end

@class NSDate;


/// Access token wrapper.
SWIFT_CLASS("_TtC11TradableAPI19TradableAccessToken")
@interface TradableAccessToken : NSObject

/// The token itself.
@property (nonatomic, readonly, copy) NSString * __nonnull token;

/// The endpoint URL from which the token was received.
@property (nonatomic, readonly, copy) NSString * __nonnull endpointURL;

/// The expiration date for this token.
@property (nonatomic, readonly, strong) NSDate * __nonnull expirationDate;

/// Simple description of this object.
@property (nonatomic, readonly, copy) NSString * __nonnull description;

/// Creates an object with given parameters.
- (nonnull instancetype)initWithToken:(NSString * __nonnull)token endpointURL:(NSString * __nonnull)endpointURL expiresIn:(NSInteger)expiresIn OBJC_DESIGNATED_INITIALIZER;
@end

@class UIImage;
@class TradableBrokerLogos;


/// An account used for trading.
SWIFT_CLASS("_TtC11TradableAPI15TradableAccount")
@interface TradableAccount : NSObject

/// A unique identifier for the account.
@property (nonatomic, readonly, copy) NSString * __nonnull uniqueId;

/// Display name for the account.
@property (nonatomic, readonly, copy) NSString * __nonnull displayName;

/// The name of the broker that the account belongs to.
@property (nonatomic, readonly, copy) NSString * __nonnull brokerName;

/// The id of the broker account.
@property (nonatomic, readonly, copy) NSString * __nonnull brokerageAccountId;

/// The router endpoint URL for this account. Tradable integrates with brokers in different regions of the world, to minimize the latency you must connect to a Tradable endpoint in the same region as the broker's trading backend is located.
@property (nonatomic, readonly, copy) NSString * __nonnull endpointUrl;

/// The ISO code for the currency.
@property (nonatomic, readonly, copy) NSString * __nonnull currencyIsoCode;

/// The symbolic sign for the currency.
@property (nonatomic, readonly, copy) NSString * __nonnull currencySign;

/// URL to the broker's backend reporting system.
@property (nonatomic, readonly, copy) NSString * __nonnull externalBackofficeReport;

/// Indicates whether it is live account or not.
@property (nonatomic, readonly) BOOL isLiveAccount;

/// A small broker logo for the account. Might not be available.
@property (nonatomic, strong) UIImage * __nullable smallBrokerLogo;

/// A broker logo on a light background for the account. Might not be available.
@property (nonatomic, strong) UIImage * __nullable lightBrokerLogo;

/// A broker logo on a dark background for the account. Might not be available.
@property (nonatomic, strong) UIImage * __nullable darkBrokerLogo;

/// A broker logo in SVG format for the account. Might not be available.
@property (nonatomic, strong) UIImage * __nullable svgBrokerLogo;

/// Simple description of this object.
@property (nonatomic, readonly, copy) NSString * __nonnull description;

/// Creates an object with given parameters.
- (nonnull instancetype)initWithId:(NSString * __nonnull)id displayName:(NSString * __nonnull)displayName brokerName:(NSString * __nonnull)brokerName brokerageAccountId:(NSString * __nonnull)brokerageAccountId endpointUrl:(NSString * __nonnull)endpointUrl currencyIsoCode:(NSString * __nonnull)currencyIsoCode currencySign:(NSString * __nonnull)currencySign externalBackofficeReport:(NSString * __nonnull)externalBackofficeReport brokerLogos:(TradableBrokerLogos * __nonnull)brokerLogos isLiveAccount:(BOOL)isLiveAccount OBJC_DESIGNATED_INITIALIZER;

/// Fetches small broker logo and caches it.
///
/// \param logoCompleted A closure containing an optional small broker logo for this account.
- (void)getSmallBrokerLogo:(void (^ __null_unspecified)(UIImage * __nullable))logoCompleted;

/// Fetches a broker logo on light background and caches it.
///
/// \param logoCompleted A closure containing an optional broker logo on light background for this account.
- (void)getLightBrokerLogo:(void (^ __null_unspecified)(UIImage * __nullable))logoCompleted;

/// Fetches a broker logo on dark background and caches it.
///
/// \param logoCompleted A closure containing an optional broker logo on dark background for this account.
- (void)getDarkBrokerLogo:(void (^ __null_unspecified)(UIImage * __nullable))logoCompleted;

/// Fetches broker logo in SVG format and caches it.
///
/// \param logoCompleted A closure containing an optional broker logo in SVG format for this account.
- (void)getSvgBrokerLogo:(void (^ __null_unspecified)(UIImage * __nullable))logoCompleted;
@end



/// Contains a list of available accounts.
SWIFT_CLASS("_TtC11TradableAPI19TradableAccountList")
@interface TradableAccountList : NSObject

/// A list of available accounts.
@property (nonatomic, copy) NSArray<TradableAccount *> * __nonnull accounts;

/// Simple description of this object.
@property (nonatomic, readonly, copy) NSString * __nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// The users balance and other account metrics. All amounts are in account currency. Some fields like, closeProfit and commission are per day, in this context a day in the brokers trading session, and the open and close of such sessions may have different open and close time from broker to broker.
SWIFT_CLASS("_TtC11TradableAPI22TradableAccountMetrics")
@interface TradableAccountMetrics : NSObject

/// Simple description of this object.
@property (nonatomic, readonly, copy) NSString * __nonnull description;
@end



/// A full snapshot of the account. Contains all necessary information about the account.
SWIFT_CLASS("_TtC11TradableAPI23TradableAccountSnapshot")
@interface TradableAccountSnapshot : NSObject

/// The metrics of the account.
@property (nonatomic, readonly, strong) TradableAccountMetrics * __nonnull metrics;

/// The orders belonging to the account.
@property (nonatomic, readonly, strong) TradableOrders * __nonnull orders;

/// The positions belonging to the account.
@property (nonatomic, readonly, strong) TradablePositions * __nonnull positions;

/// The tick prices for symbols the request was made for.
@property (nonatomic, readonly, copy) NSArray<TradablePrice *> * __nonnull prices;

/// Simple description of this object.
@property (nonatomic, readonly, copy) NSString * __nonnull description;

/// Creates an object with given parameters.
- (nonnull instancetype)initWithMetrics:(TradableAccountMetrics * __nonnull)metrics orders:(TradableOrders * __nonnull)orders positions:(TradablePositions * __nonnull)positions prices:(NSArray<TradablePrice *> * __nonnull)prices OBJC_DESIGNATED_INITIALIZER;
@end


/// Aggregations used for candle requests.
typedef SWIFT_ENUM(NSInteger, TradableAggregation) {

/// One minute aggregation.
  TradableAggregationMINUTE = 1,

/// Five minutes aggregation.
  TradableAggregationFIVE_MINUTES = 5,

/// Fifteen minutes aggregation.
  TradableAggregationFIFTEEN_MINUTES = 15,

/// Thirty minutes aggregation.
  TradableAggregationTHIRTY_MINUTES = 30,

/// One hour aggregation.
  TradableAggregationHOUR = 60,

/// One day aggregation.
  TradableAggregationDAY = 1440,

/// One week aggregation.
  TradableAggregationWEEK = 10080,

/// One month aggregation.
  TradableAggregationMONTH = 40320,
};



/// Contains the amount to which a position is to be reduced.
SWIFT_CLASS("_TtC11TradableAPI14TradableAmount")
@interface TradableAmount : NSObject

/// The amount the position should be reduced to.
@property (nonatomic, readonly) double amount;

/// Simple description of this object.
@property (nonatomic, readonly, copy) NSString * __nonnull description;

/// Creates an object with given parameters.
- (nonnull instancetype)initWithAmount:(double)amount OBJC_DESIGNATED_INITIALIZER;
@end



/// Contains a set of various broker logos for specific account.
SWIFT_CLASS("_TtC11TradableAPI19TradableBrokerLogos")
@interface TradableBrokerLogos : NSObject

/// Simple description of this object.
@property (nonatomic, readonly, copy) NSString * __nonnull description;

/// Creates an object with given parameters.
- (nonnull instancetype)initWithSmall:(NSString * __nonnull)small onLight:(NSString * __nonnull)onLight onDark:(NSString * __nonnull)onDark svg:(NSString * __nonnull)svg OBJC_DESIGNATED_INITIALIZER;
@end



/// Historic candle class containing necessary candle information.
SWIFT_CLASS("_TtC11TradableAPI14TradableCandle")
@interface TradableCandle : NSObject

/// The Unix timestamp in milliseconds for the start of the candle.
@property (nonatomic, readonly) uint64_t timeStamp;

/// The open price for the candle.
@property (nonatomic, readonly) double open;

/// The close price for the candle.
@property (nonatomic, readonly) double close;

/// The highest price the candle has reached.
@property (nonatomic, readonly) double high;

/// The lowest price the candle has reached.
@property (nonatomic, readonly) double low;

/// The accumulated volume, in millions.
@property (nonatomic, readonly) double volume;

/// Simple description of this object.
@property (nonatomic, readonly, copy) NSString * __nonnull description;

/// Creates an object with given parameters.
- (nonnull instancetype)initWithTimeStamp:(uint64_t)timeStamp open:(double)open close:(double)close high:(double)high low:(double)low volume:(double)volume OBJC_DESIGNATED_INITIALIZER;
@end



/// A historic candle request class, used for requesting historic data.
SWIFT_CLASS("_TtC11TradableAPI21TradableCandleRequest")
@interface TradableCandleRequest : NSObject

/// The symbol to get candles for.
@property (nonatomic, readonly, copy) NSString * __nonnull symbol;

/// The start of the candle range; Unix timestamp in milliseconds.
@property (nonatomic, readonly) uint64_t from;

/// The end of the candle range; Unix timestamp in milliseconds.
@property (nonatomic, readonly) uint64_t to;

/// The aggregation interval.
@property (nonatomic, readonly) enum TradableAggregation aggregation;

/// Simple description of this object.
@property (nonatomic, readonly, copy) NSString * __nonnull description;

/// Creates an object with given parameters.
- (nonnull instancetype)initWithSymbol:(NSString * __nonnull)symbol from:(uint64_t)from to:(uint64_t)to aggregation:(enum TradableAggregation)aggregation OBJC_DESIGNATED_INITIALIZER;
@end



/// Contains a list of candles.
SWIFT_CLASS("_TtC11TradableAPI15TradableCandles")
@interface TradableCandles : NSObject

/// A list of candles.
@property (nonatomic, copy) NSArray<TradableCandle *> * __nonnull candles;

/// Simple description of this object.
@property (nonatomic, readonly, copy) NSString * __nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// The delegate protocol for the Edit Order widget.
SWIFT_PROTOCOL("_TtP11TradableAPI25TradableEditOrderDelegate_")
@protocol TradableEditOrderDelegate

/// Edit Order delegate hook for knowing when the widget has been dismissed.
- (void)tradableEditOrderDismissed;
@end

@class NSHTTPURLResponse;
enum TradableErrorType : NSInteger;


/// TradableError contains detailed description about an error delivered in the API response.
SWIFT_CLASS("_TtC11TradableAPI13TradableError")
@interface TradableError : NSObject

/// A raw http response returned with the error.
@property (nonatomic, readonly, strong) NSHTTPURLResponse * __nonnull rawHttpResponse;

/// The error code.
@property (nonatomic, readonly) NSInteger errorCode;

/// A description of the error.
@property (nonatomic, readonly, copy) NSString * __nonnull errorDescription;

/// The type of the error.
@property (nonatomic, readonly) enum TradableErrorType errorType;

/// Simple description of this object.
@property (nonatomic, readonly, copy) NSString * __nonnull description;
@end


/// Possible error types.
typedef SWIFT_ENUM(NSInteger, TradableErrorType) {

/// Error emerged in snapshot updates.
  TradableErrorTypeSNAPSHOT_UPDATE = 0,

/// Error emerged in orders updates.
  TradableErrorTypeORDERS_UPDATE = 1,

/// Error emerged in positions updates.
  TradableErrorTypePOSITIONS_UPDATE = 2,

/// Error emerged in prices updates.
  TradableErrorTypePRICES_UPDATE = 3,

/// Error emerged in candles updates.
  TradableErrorTypeCANDLES_UPDATE = 4,

/// The source of the error is unknown, or at least not related to the updates.
  TradableErrorTypeUNKNOWN = 5,
};

enum TradableInstrumentType : NSInteger;


/// Contains instrument data, such as symbol, type, precision and more.
SWIFT_CLASS("_TtC11TradableAPI18TradableInstrument")
@interface TradableInstrument : NSObject

/// The instrument symbol. This is unified across different brokerage accounts and is the symbol to use when referring to the instrument in the API communication.
@property (nonatomic, readonly, copy) NSString * __nonnull symbol;

/// The symbol that is used to represent the instrument in the brokerage account.
@property (nonatomic, readonly, copy) NSString * __nonnull brokerageAccountSymbol;

/// The instrument display name.
@property (nonatomic, readonly, copy) NSString * __nonnull displayName;

/// A short description of the instrument.
@property (nonatomic, readonly, copy) NSString * __nonnull shortDescription;

/// The instrument type.
@property (nonatomic, readonly) enum TradableInstrumentType type;

/// The pip precisionfor the instrument; specifies at which decimal place the pip is placed.
@property (nonatomic, readonly) NSInteger pipPrecision;

/// The minimum order amount for this instrument.
@property (nonatomic, readonly) double minAmount;

/// The maximum order amount for this instrument.
@property (nonatomic, readonly) double maxAmount;

/// True if order amounts must be multiples of the minimum amount.
@property (nonatomic, readonly) BOOL multipleOfMinAmount;

/// Simple description of this object.
@property (nonatomic, readonly, copy) NSString * __nonnull description;

/// Creates an object with given parameters.
- (nonnull instancetype)initWithSymbol:(NSString * __nonnull)symbol brokerageAccountSymbol:(NSString * __nonnull)brokerageAccountSymbol displayName:(NSString * __nonnull)displayName shortDescription:(NSString * __nonnull)shortDescription type:(enum TradableInstrumentType)type pipPrecision:(NSInteger)pipPrecision minAmount:(double)minAmount maxAmount:(double)maxAmount multipleOfMin:(BOOL)multipleOfMin OBJC_DESIGNATED_INITIALIZER;
@end



/// The delegate protocol for the Instrument Selector widget.
SWIFT_PROTOCOL("_TtP11TradableAPI34TradableInstrumentSelectorDelegate_")
@protocol TradableInstrumentSelectorDelegate

/// Instrument Selector delegate hook for knowing what instrument was selected. Called when the widget has been dismissed.
- (void)tradableInstrumentSelectorDismissed:(TradableInstrument * __nullable)instrument;
@end


/// Available instrument types.
typedef SWIFT_ENUM(NSInteger, TradableInstrumentType) {

/// Foreign exchange instrument type.
  TradableInstrumentTypeFOREX = 0,

/// Contract for difference instrument type.
  TradableInstrumentTypeCFD = 1,
};



/// Tradable OS user. Might have a couple of accounts assigned to it.
SWIFT_CLASS("_TtC11TradableAPI14TradableOSUser")
@interface TradableOSUser : NSObject

/// Unique identifier of the user.
@property (nonatomic, readonly, copy) NSString * __nonnull userId;

/// Name of the user.
@property (nonatomic, readonly, copy) NSString * __nonnull userName;

/// Thumbnail image of the user.
@property (nonatomic, strong) UIImage * __nullable userThumbImg;

/// Picture image of the user.
@property (nonatomic, strong) UIImage * __nullable userPicImg;

/// Simple description of this object.
@property (nonatomic, readonly, copy) NSString * __nonnull description;

/// Creates an object with given parameters.
- (nonnull instancetype)initWithUserId:(NSString * __nonnull)userId userName:(NSString * __nonnull)userName userThumb:(NSString * __nonnull)userThumb userPic:(NSString * __nonnull)userPic OBJC_DESIGNATED_INITIALIZER;

/// Fetches a thumbnail and caches it.
///
/// \param thumbCompleted A closure containing the thumbnail for this user.
- (void)getUserThumbnail:(void (^ __null_unspecified)(UIImage * __nonnull))thumbCompleted;

/// Fetches a picture and caches it.
///
/// \param picCompleted A closure containing the picture for this user.
- (void)getUserPicture:(void (^ __null_unspecified)(UIImage * __nonnull))picCompleted;
@end

enum TradableOrderType : NSInteger;
enum TradableOrderStatus : NSInteger;


/// Contains the order data, such as amount, type, price, status and more.
SWIFT_CLASS("_TtC11TradableAPI13TradableOrder")
@interface TradableOrder : NSObject

/// Amount of the order.
@property (nonatomic, readonly) double amount;

/// Unix timestamp in milliseconds of the order creation.
@property (nonatomic, readonly) uint64_t creationDate;

/// Unique identifier of the order.
@property (nonatomic, readonly, copy) NSString * __nonnull id;

/// Symbol of the order.
@property (nonatomic, readonly, copy) NSString * __nonnull symbol;

/// Order side.
@property (nonatomic, readonly) enum TradableOrderSide side;

/// Order type.
@property (nonatomic, readonly) enum TradableOrderType type;

/// Order status.
@property (nonatomic, readonly) enum TradableOrderStatus status;

/// Price the order triggers at.
@property (nonatomic, readonly) double price;

/// Account that the order belongs to.
@property (nonatomic, readonly, strong) TradableAccount * __nonnull account;

/// Identifier of the affected position. Might not be available.
@property (nonatomic, readonly, copy) NSString * __nullable affectedPositionId;

/// Simple description of this object.
@property (nonatomic, readonly, copy) NSString * __nonnull description;

/// Fetches the position that has been affected by this order.
///
/// \param positionCompleted A closure containing the affected position.
- (void)getAffectedPosition:(void (^ __null_unspecified)(TradablePosition * __nullable))positionCompleted;
@end



/// Contains order data needed when issuing a new order.
SWIFT_CLASS("_TtC11TradableAPI20TradableOrderCommand")
@interface TradableOrderCommand : NSObject

/// Instrument symbol for the order.
@property (nonatomic, readonly, copy) NSString * __nonnull symbol;

/// Amount of the order.
@property (nonatomic, readonly) double amount;

/// Trigger price for the order.
@property (nonatomic, readonly) double price;

/// Order side.
@property (nonatomic, readonly) enum TradableOrderSide side;

/// /Order type.
@property (nonatomic, readonly) enum TradableOrderType type;

/// Simple description of this object.
@property (nonatomic, readonly, copy) NSString * __nonnull description;

/// Creates an object with given parameters.
- (nonnull instancetype)initWithSymbol:(NSString * __nonnull)symbol amount:(double)amount price:(double)price side:(enum TradableOrderSide)side type:(enum TradableOrderType)type OBJC_DESIGNATED_INITIALIZER;
@end



/// The delegate protocol for the Order Entry widget.
SWIFT_PROTOCOL("_TtP11TradableAPI26TradableOrderEntryDelegate_")
@protocol TradableOrderEntryDelegate

/// Order Entry delegate hook for knowing if an order was successfully placed. Called when the widget has been dismissed.
- (void)tradableOrderEntryDismissed:(TradableOrder * __nullable)order;
@end



/// Contains information with which the order will be modified.
SWIFT_CLASS("_TtC11TradableAPI25TradableOrderModification")
@interface TradableOrderModification : NSObject

/// A price the order should be modified with.
@property (nonatomic, readonly) double price;

/// Simple description of this object.
@property (nonatomic, readonly, copy) NSString * __nonnull description;

/// Creates an object with given parameters.
- (nonnull instancetype)initWithPrice:(double)price OBJC_DESIGNATED_INITIALIZER;
@end


/// Possible sides of order.
typedef SWIFT_ENUM(NSInteger, TradableOrderSide) {

/// Buy (long) side.
  TradableOrderSideBUY = 0,

/// Sell (short) side.
  TradableOrderSideSELL = 1,
};


/// Possible statuses of order.
typedef SWIFT_ENUM(NSInteger, TradableOrderStatus) {

/// The order with this status is pending; it's not a final status, the order can be cancelled or executed.
  TradableOrderStatusPENDING = 0,

/// The order with this status has been executed; it's a final status.
  TradableOrderStatusEXECUTED = 1,

/// The order with this status has been cancelled; it's a final status.
  TradableOrderStatusCANCELLED = 2,
};


/// Available types of orders.
typedef SWIFT_ENUM(NSInteger, TradableOrderType) {

/// Market order type.
  TradableOrderTypeMARKET = 0,

/// Limit order type.
  TradableOrderTypeLIMIT = 1,

/// Stop order type.
  TradableOrderTypeSTOP = 2,
};



/// Contains lists of pending, recently cancelled and recently executed orders.
SWIFT_CLASS("_TtC11TradableAPI14TradableOrders")
@interface TradableOrders : NSObject

/// A list of pending orders.
@property (nonatomic, copy) NSArray<TradableOrder *> * __nonnull pending;

/// A list of recently cancelled orders.
@property (nonatomic, copy) NSArray<TradableOrder *> * __nonnull recentlyCancelled;

/// A list of recently executed orders.
@property (nonatomic, copy) NSArray<TradableOrder *> * __nonnull recentlyExecuted;

/// Simple description of this object.
@property (nonatomic, readonly, copy) NSString * __nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// Contains the position data, such as unique ID, symbol, amount, side, open/closed profit and more.
SWIFT_CLASS("_TtC11TradableAPI16TradablePosition")
@interface TradablePosition : NSObject

/// Unique identifier of the position.
@property (nonatomic, readonly, copy) NSString * __nonnull id;

/// Unix timestamp in milliseconds of the position creation.
@property (nonatomic, readonly) uint64_t creationTime;

/// Symbol of the position.
@property (nonatomic, readonly, copy) NSString * __nonnull symbol;

/// Open price of the position (volume-weighted average).
@property (nonatomic, readonly) double openPrice;

/// Amount of the position.
@property (nonatomic, readonly) double amount;

/// Side of the position.
@property (nonatomic, readonly) enum TradableOrderSide side;

/// Unix timestamp in milliseconds of the position last modification.
@property (nonatomic, readonly) uint64_t lastModified;

/// Account that the position belongs to.
@property (nonatomic, readonly, strong) TradableAccount * __nonnull account;

/// Simple description of this object.
@property (nonatomic, readonly, copy) NSString * __nonnull description;
@end



/// The delegate protocol for the Position Detail widget.
SWIFT_PROTOCOL("_TtP11TradableAPI30TradablePositionDetailDelegate_")
@protocol TradablePositionDetailDelegate

/// Position Detail delegate hook for knowing when the widget has been dismissed.
- (void)tradablePositionDetailDismissed;
@end



/// Contains lists of open and recently closed positions.
SWIFT_CLASS("_TtC11TradableAPI17TradablePositions")
@interface TradablePositions : NSObject

/// A list of open positions.
@property (nonatomic, copy) NSArray<TradablePosition *> * __nonnull open;

/// A list of recently closed positions.
@property (nonatomic, copy) NSArray<TradablePosition *> * __nonnull recentlyClosed;

/// Simple description of this object.
@property (nonatomic, readonly, copy) NSString * __nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// Contains the ask and bid price for a symbol, alongside with a spread in pips.
SWIFT_CLASS("_TtC11TradableAPI13TradablePrice")
@interface TradablePrice : NSObject

/// Symbol for which this object holds prices.
@property (nonatomic, readonly, copy) NSString * __nonnull symbol;

/// Simple description of this object.
@property (nonatomic, readonly, copy) NSString * __nonnull description;
@end



/// Contains take profit and stop loss levels.
SWIFT_CLASS("_TtC11TradableAPI18TradableProtection")
@interface TradableProtection : NSObject

/// Stop loss price.
@property (nonatomic, readonly) double stopLoss;

/// Take profit price.
@property (nonatomic, readonly) double takeProfit;

/// Simple description of this object.
@property (nonatomic, readonly, copy) NSString * __nonnull description;

/// Creates an object with given parameters.
- (nonnull instancetype)initWithStopLoss:(double)stopLoss takeProfit:(double)takeProfit OBJC_DESIGNATED_INITIALIZER;
@end


/// Available protection types.
typedef SWIFT_ENUM(NSInteger, TradableSingleProtection) {

/// Take profit protection.
  TradableSingleProtectionTAKEPROFIT = 0,

/// Stop loss protection.
  TradableSingleProtectionSTOPLOSS = 1,
};



/// Contains a list of symbols.
SWIFT_CLASS("_TtC11TradableAPI15TradableSymbols")
@interface TradableSymbols : NSObject

/// A list of symbols.
@property (nonatomic, copy) NSArray<NSString *> * __nonnull symbols;

/// Simple description of this object.
@property (nonatomic, readonly, copy) NSString * __nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Update frequency for managed mode.
typedef SWIFT_ENUM(NSInteger, TradableUpdateFrequency) {

/// A new request is made as soon as the response comes back.
  TradableUpdateFrequencyRealTime = 0,

/// A new request is made one second after the response comes back.
  TradableUpdateFrequencyOneSecond = 1,

/// A new request is made two seconds after the response comes back.
  TradableUpdateFrequencyTwoSeconds = 2,

/// A new request is made three seconds after the response comes back.
  TradableUpdateFrequencyThreeSeconds = 3,
};


/// Update type for managed mode.
typedef SWIFT_ENUM(NSInteger, TradableUpdateType) {

/// Updates for account snapshot, orders, positions and prices. A list of symbols should be specified for this update type.
  TradableUpdateTypeFull = 0,

/// Updates just for account positions.
  TradableUpdateTypePositions = 1,

/// Updates just for account orders.
  TradableUpdateTypeOrders = 2,

/// Updates just for tick prices. A list of symbols should be specified for this update type.
  TradableUpdateTypePrices = 3,
};


@interface UIView (SWIFT_EXTENSION(TradableAPI))
@end

#pragma clang diagnostic pop
