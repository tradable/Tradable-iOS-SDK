// Generated by Apple Swift version 2.2 (swiftlang-703.0.18.8 clang-703.0.31)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import UIKit;
@import Foundation;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
enum TradableDemoAccountType : NSInteger;
@class UIWebView;
@class NSURL;
@class TradableAccessToken;
@class TradableAPIAuthenticationRequest;
@class TradableError;
@class TradableDemoAPIAuthenticationRequest;
@class TradableAPIRefreshAuthenticationRequest;
@class TradableAccount;
@class TradableBroker;
@class TradableApp;
@class TradableOSUser;
@class TradableAccountList;
@class TradableIndicatorInfo;
@class TradableInstrument;
enum TradableOrderSide : NSInteger;
@protocol TradableOrderEntryDelegate;
@class UIViewController;
@protocol TradableInstrumentSelectorDelegate;
@class TradableOrder;
@protocol TradableEditOrderDelegate;
@class TradablePosition;
@protocol TradablePositionDetailDelegate;
@protocol TradableEventsDelegate;
@protocol TradableAuthDelegate;
@protocol TradableSearchDelegate;


/// The Tradable object implementing the singleton pattern.
SWIFT_CLASS("_TtC11TradableAPI8Tradable")
@interface Tradable : NSObject

/// Tradable events delegate for hooking into update responses.
@property (nonatomic, weak) id <TradableEventsDelegate> _Nullable delegate;

/// Tradable auth delegate for hooking into auth responses.
@property (nonatomic, weak) id <TradableAuthDelegate> _Nullable authDelegate;

/// Tradable search delegate for hooking into search results.
@property (nonatomic, weak) id <TradableSearchDelegate> _Nullable searchDelegate;

/// A singleton object used to invoke API methods on.
+ (Tradable * _Nonnull)sharedInstance;

/// A method used to create and/or activate DEMO accounts. Tries to activate Tradable SDK with the last known tokens; if fails, falls back to creating a demo account. If the current tokens exist and are not expired, the SDK uses the current tokens for the session. Otherwise tries to restore previous session's tokens and use them for the current session. If those tokens are expired, tries to refresh them and uses the refreshed tokens; if they don't exist, the method creates a new demo account, with params specified by the user. This is the preferred method to use and should be the first call made to TradableAPI. This method handles token refreshing, if found tokens are refreshable.
///
/// \param accountType The account type to be used or created (stocks or forex).
///
/// \param appId Client ID.
///
/// \param appKey Client key.
- (void)activateOrCreateDemoAccountOfType:(enum TradableDemoAccountType)accountType appId:(uint64_t)appId appKey:(NSString * _Nonnull)appKey;

/// A method used to create and/or activate LIVE accounts. Tries to activate Tradable SDK with the last known tokens; if fails, falls back to authentication flow. If the current tokens exist and are not expired, the SDK uses the current tokens for the session. Otherwise tries to restore previous session's tokens and use them for the current session. If those tokens are expired or don't exist, the method invokes the authentication flow for Tradable, with params specified by the user. This is the preferred method to use and should be the first call made to TradableAPI. This method handles token refreshing, if found tokens are refreshable.
///
/// \param appId OAuth flow client ID.
///
/// \param uri OAuth flow redirect URL.
///
/// \param webView Optional UIWebView component used to open login website. If not specified, system browser will be opened.
- (void)activateOrAuthenticate:(uint64_t)appId uri:(NSString * _Nonnull)uri webView:(UIWebView * _Nullable)webView;

/// Begins authentication flow for Tradable; if webView is not specified, it opens a system browser in order to authorize. Doesn't restore previous session's token. Consider using activateOrAuthenticate(appId: UInt64, uri: String, webView: UIWebView?) instead.
///
/// \param appId OAuth flow client ID.
///
/// \param uri OAuth flow redirect URL.
///
/// \param webView Optional UIWebView component used to open login website. If not specified, system browser will be opened.
- (void)authenticateWithAppIdAndUri:(uint64_t)appId uri:(NSString * _Nonnull)uri webView:(UIWebView * _Nullable)webView;

/// Tells the API to activate with URL containing access token. Should be called when system browser opens the application using TradableAPI. When the access token is successfully created, tradableReady auth delegate method is called.
///
/// \param url URL containing information needed in order to create access token.
- (void)activateAfterLaunchWithURL:(NSURL * _Nonnull)url;

/// Tells the API to activate with an access token. When the activation is successful, tradableReady auth delegate method is called; if activation fails, tradableAuthenticationError auth delegate method is called.
///
/// \param accessToken The access token to activate the API with.
- (void)activateAfterLaunchWithAccessToken:(TradableAccessToken * _Nonnull)accessToken;

/// Provides a token granting access to the account(s) associated with the given login.
///
/// \param authRequest The authentication request to be sent.
///
/// \param completion The closure to be called when the response comes back, with optional TradableAccessToken object and optional TradableError object.
- (void)authenticate:(TradableAPIAuthenticationRequest * _Nonnull)authRequest completion:(void (^ _Null_unspecified)(TradableAccessToken * _Nullable accessToken, TradableError * _Nullable error))completion;

/// Creates a demo account of the specified type and returns an authentication granting access to that account.
///
/// \param demoAuthRequest The demo authentication request to be sent.
///
/// \param completion The closure to be called when the response comes back, with optional TradableAccessToken object and optional TradableError object.
- (void)createDemoAccount:(TradableDemoAPIAuthenticationRequest * _Nonnull)demoAuthRequest completion:(void (^ _Null_unspecified)(TradableAccessToken * _Nullable accessToken, TradableError * _Nullable error))completion;

/// Refreshes the authentication that was granted when the refresh token was issued.
///
/// \param refreshAuthRequest The refresh authentication request to be sent.
///
/// \param completion The closure to be called when the response comes back, with optional TradableAccessToken object and optional TradableError object.
- (void)refreshAuthentication:(TradableAPIRefreshAuthenticationRequest * _Nonnull)refreshAuthRequest completion:(void (^ _Null_unspecified)(TradableAccessToken * _Nullable accessToken, TradableError * _Nullable error))completion;

/// Returns a list of active accounts.
- (NSArray<TradableAccount *> * _Nonnull)getActiveAccounts;

/// Returns the access token for specified account (may be nil).
- (TradableAccessToken * _Nullable)getAccessToken:(TradableAccount * _Nonnull)forAccount;

/// Returns an account's unique ID to token dictionary consisting of the last session's access tokens, if such were stored; nil otherwise.
- (NSDictionary<NSString *, TradableAccessToken *> * _Nullable)getLastSessionAccessTokens;

/// Gets the list of available brokers.
///
/// \param completion The closure to be called when the response comes back, with optional list of TradableBroker objects and optional TradableError object.
- (void)getBrokers:(void (^ _Null_unspecified)(NSArray<TradableBroker *> * _Nullable brokers, TradableError * _Nullable error))completion;

/// Gets the app information.
///
/// \param clientId The ID of the app to retrieve information for.
///
/// \param completion The closure to be called when the response comes back, with optional TradableApp object and optional TradableError object.
- (void)getAppInfo:(uint64_t)clientId completion:(void (^ _Null_unspecified)(TradableApp * _Nullable app, TradableError * _Nullable error))completion;

/// Gets the current OS user.
///
/// \param accessToken The access token to be used when calling the API.
///
/// \param completion The closure to be called when the response comes back, with optional TradableOSUser object and optional TradableError object.
- (void)getCurrentUser:(TradableAccessToken * _Nonnull)accessToken completion:(void (^ _Null_unspecified)(TradableOSUser * _Nullable user, TradableError * _Nullable error))completion;

/// Gets available accounts.
///
/// \param accessToken The access token to be used when calling the API.
///
/// \param completion The closure to be called when the response comes back, with optional TradableAccountList object and optional TradableError object.
- (void)getAvailableAccounts:(TradableAccessToken * _Nonnull)accessToken completion:(void (^ _Null_unspecified)(TradableAccountList * _Nullable accounts, TradableError * _Nullable error))completion;

/// Gets the indicators information.
///
/// \param forAccount The account for which the indicators info should be fetched.
///
/// \param completion The closure to be called when the response comes back, with optional list of TradableIndicatorInfo objects and optional TradableError object.
- (void)getIndicatorsInfo:(TradableAccount * _Nonnull)forAccount completion:(void (^ _Null_unspecified)(NSArray<TradableIndicatorInfo *> * _Nullable indicatorsInfo, TradableError * _Nullable error))completion;

/// Presents Order Entry widget. Assigns TradableEventDelegate to itself. When TradableInstrumentSelector is presented, assigns TradableSearchDelegate to it.
///
/// \param forAccount The account for which the widget should be presented.
///
/// \param instrument An optional, preselected instrument in the widget. If nil, no instrument will be preselected.
///
/// \param side A preselected order side in the widget.
///
/// \param delegate An optional TradableOrderEntryDelegate that will be called when the widget is dismissed.
///
/// \param presentingViewController A view controller that will present the widget.
///
/// \param presentationStyle A style used when presenting the widget.
- (void)presentOrderEntry:(TradableAccount * _Nonnull)forAccount instrument:(TradableInstrument * _Nullable)instrument side:(enum TradableOrderSide)side delegate:(id <TradableOrderEntryDelegate> _Nullable)delegate presentingViewController:(UIViewController * _Nonnull)presentingViewController presentationStyle:(UIModalPresentationStyle)presentationStyle;

/// Presents Instrument Selector widget. Assigns TradableSearchDelegate to itself.
///
/// \param forAccount The account for which the widget should be presented.
///
/// \param delegate An optional TradableInstrumentSelectorDelegate that will handle the widget dismissal with selected instrument.
///
/// \param presentingViewController A view controller that will present the widget.
///
/// \param presentationStyle A style used when presenting the widget.
- (void)presentInstrumentSelector:(TradableAccount * _Nonnull)forAccount delegate:(id <TradableInstrumentSelectorDelegate> _Nullable)delegate presentingViewController:(UIViewController * _Nonnull)presentingViewController presentationStyle:(UIModalPresentationStyle)presentationStyle;

/// Presents Edit Order widget. Assigns TradableEventDelegate to itself.
///
/// \param forAccount The account for which the widget should be presented.
///
/// \param order The order whose details will be displayed and which is to be edited.
///
/// \param delegate An optional TradableEditOrderDelegate that will be called when the widget is dismissed.
///
/// \param presentingViewController A view controller that will present the widget.
///
/// \param presentationStyle A style used when presenting the widget.
- (void)presentEditOrder:(TradableAccount * _Nonnull)forAccount order:(TradableOrder * _Nonnull)order delegate:(id <TradableEditOrderDelegate> _Nullable)delegate presentingViewController:(UIViewController * _Nonnull)presentingViewController presentationStyle:(UIModalPresentationStyle)presentationStyle;

/// Presents Position Detail widget. Assigns TradableEventDelegate to itself.
///
/// \param forAccount The account for which the widget should be presented.
///
/// \param position The position whose details will be displayed.
///
/// \param delegate An optional TradablePositionDetailDelegate that will be called when the widget is dismissed.
///
/// \param presentingViewController A view controller that will present the widget.
///
/// \param presentationStyle A style used when presenting the widget.
- (void)presentPositionDetail:(TradableAccount * _Nonnull)forAccount position:(TradablePosition * _Nonnull)position delegate:(id <TradablePositionDetailDelegate> _Nullable)delegate presentingViewController:(UIViewController * _Nonnull)presentingViewController presentationStyle:(UIModalPresentationStyle)presentationStyle;
@end



/// A request for an authentication token granting access to the accounts associated with the given broker login.
SWIFT_CLASS("_TtC11TradableAPI32TradableAPIAuthenticationRequest")
@interface TradableAPIAuthenticationRequest : NSObject

/// The app key for authentication.
@property (nonatomic, readonly, copy) NSString * _Nonnull appKey;

/// The id of the app that is requesting access.
@property (nonatomic, readonly) uint64_t appId;

/// The id of the broker that the account is at.
@property (nonatomic, readonly) NSInteger brokerId;

/// The login for the account.
@property (nonatomic, readonly, copy) NSString * _Nonnull login;

/// The password for the account.
@property (nonatomic, readonly, copy) NSString * _Nonnull password;

/// Allows the caller to provide an id for the user, so it is possible to link the user identity in the caller's system with the Tradable account.
@property (nonatomic, readonly, copy) NSString * _Nullable externalId;

/// Simple description of this object.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;

/// Creates an object with given parameters.
- (nonnull instancetype)initWithAppKey:(NSString * _Nonnull)appKey appId:(uint64_t)appId brokerId:(NSInteger)brokerId login:(NSString * _Nonnull)login password:(NSString * _Nonnull)password OBJC_DESIGNATED_INITIALIZER;

/// Creates an object with given parameters.
- (nonnull instancetype)initWithAppKey:(NSString * _Nonnull)appKey appId:(uint64_t)appId brokerId:(NSInteger)brokerId login:(NSString * _Nonnull)login password:(NSString * _Nonnull)password externalId:(NSString * _Nullable)externalId OBJC_DESIGNATED_INITIALIZER;
@end



/// A request to refresh the authentication that was granted when the refresh token was issued.
SWIFT_CLASS("_TtC11TradableAPI39TradableAPIRefreshAuthenticationRequest")
@interface TradableAPIRefreshAuthenticationRequest : NSObject

/// The value of the refresh token.
@property (nonatomic, readonly, copy) NSString * _Nonnull refreshTokenValue;

/// The client secret of the app that is requesting the refresh.
@property (nonatomic, readonly, copy) NSString * _Nullable appSecret;

/// Simple description of this object.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;

/// Creates an object with given parameters.
- (nonnull instancetype)initWithRefreshTokenValue:(NSString * _Nonnull)refreshTokenValue OBJC_DESIGNATED_INITIALIZER;

/// Creates an object with given parameters.
- (nonnull instancetype)initWithRefreshTokenValue:(NSString * _Nonnull)refreshTokenValue appSecret:(NSString * _Nullable)appSecret OBJC_DESIGNATED_INITIALIZER;
@end

@class NSDate;
@class NSCoder;


/// Access token wrapper.
SWIFT_CLASS("_TtC11TradableAPI19TradableAccessToken")
@interface TradableAccessToken : NSObject <NSCoding>

/// The token itself.
@property (nonatomic, readonly, copy) NSString * _Nonnull token;

/// The refresh token to use in order to refresh the API authentication. Will be nil for OAuth flow.
@property (nonatomic, readonly, copy) NSString * _Nullable refreshToken;

/// The endpoint URL from which the token was received.
@property (nonatomic, readonly, copy) NSString * _Nonnull endpointURL;

/// The expiration date for this token.
@property (nonatomic, readonly, strong) NSDate * _Nonnull expirationDate;

/// The expiration date of the refresh token.  Will be nil for OAuth flow.
@property (nonatomic, readonly, strong) NSDate * _Nullable refreshTokenExpirationDate;

/// Simple description of this object.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;

/// Creates an object with given parameters.
- (nonnull instancetype)initWithToken:(NSString * _Nonnull)token endpointURL:(NSString * _Nonnull)endpointURL expiresIn:(uint64_t)expiresIn OBJC_DESIGNATED_INITIALIZER;

/// Creates an object with given parameters.
- (nonnull instancetype)initWithToken:(NSString * _Nonnull)token endpointURL:(NSString * _Nonnull)endpointURL expirationDate:(NSDate * _Nonnull)expirationDate OBJC_DESIGNATED_INITIALIZER;

/// Returns the list of accounts for which this token is used.
- (NSArray<TradableAccount *> * _Nonnull)getAccounts;

/// Removes the token from the keychain. If it's an active token, nulls the SDK's access token for the session.
- (void)dispose;

/// Creates an object with given parameters. Conforms to NSCoding protocol.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder;

/// Encoding method, conforming to NSCoding protocol.
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
@end

@class TradableBrokerLogos;
enum TradableTrackConfiguration : NSInteger;
@class TradableOrderSupport;
enum TradableInstrumentRetrieval : NSInteger;
@class TradableProtectionEntryTypes;
enum TradableUpdateType : NSInteger;
enum TradableUpdateFrequency : NSInteger;
@class TradableUpdateRequest;
@class TradableAccountSnapshot;
@class TradablePrices;
@class TradableAccountMetrics;
@class TradableOrders;
@class TradableOrderCommand;
@protocol TradableOrderStatusDelegate;
@class TradableOrderProtection;
@class TradablePositions;
@class TradableCandleRequest;
@class TradableCandles;
@class TradableLastSessionCloseRequest;
@class TradableLastSessionClose;
@class TradableInstrumentSearchResults;
@class TradableInstrumentSearchRequest;
@class TradableInstrumentList;


/// An account used for trading.
SWIFT_CLASS("_TtC11TradableAPI15TradableAccount")
@interface TradableAccount : NSObject <NSCoding>

/// A unique identifier for the account.
@property (nonatomic, readonly, copy) NSString * _Nonnull uniqueId;

/// Display name for the account.
@property (nonatomic, readonly, copy) NSString * _Nonnull displayName;

/// The name of the broker that the account belongs to.
@property (nonatomic, readonly, copy) NSString * _Nonnull brokerName;

/// The id of the broker that the account belongs to.
@property (nonatomic, readonly) NSInteger brokerId;

/// The id of the broker account.
@property (nonatomic, readonly, copy) NSString * _Nonnull brokerageAccountId;

/// Collection of logos for the broker.
@property (nonatomic, readonly, strong) TradableBrokerLogos * _Nonnull brokerLogos;

/// The router endpoint URL for this account. Tradable integrates with brokers in different regions of the world, to minimize the latency you must connect to a Tradable endpoint in the same region as the broker's trading backend is located.
@property (nonatomic, readonly, copy) NSString * _Nonnull endpointUrl;

/// The ISO code for the currency.
@property (nonatomic, readonly, copy) NSString * _Nonnull currencyIsoCode;

/// The symbolic sign for the currency.
@property (nonatomic, readonly, copy) NSString * _Nonnull currencySign;

/// An optional URL to the broker's backend reporting system.
@property (nonatomic, readonly, copy) NSString * _Nullable externalBackofficeReport;

/// Indicates whether it is live account or not.
@property (nonatomic, readonly) BOOL isLiveAccount;

/// Specifies the account's track configuration.
@property (nonatomic, readonly) enum TradableTrackConfiguration trackConfiguration;

/// Specifies if positions on this account support stop loss protections.
@property (nonatomic, readonly) BOOL stopLossSupported;

/// Specifies if positions on this account support take profit protections.
@property (nonatomic, readonly) BOOL takeProfitSupported;

/// Specifies the capabilities of market orders on this account.
@property (nonatomic, readonly, strong) TradableOrderSupport * _Nonnull marketOrdersSupport;

/// Specifies the capabilities of limit orders on this account.
@property (nonatomic, readonly, strong) TradableOrderSupport * _Nonnull limitOrdersSupport;

/// Specifies the capabilities of stop orders on this account.
@property (nonatomic, readonly, strong) TradableOrderSupport * _Nonnull stopOrdersSupport;

/// Specifies how instruments are retrieved for this account.
@property (nonatomic, readonly) enum TradableInstrumentRetrieval instrumentRetrieval;

/// Specifies the types of protection entry supported, if any, when placing or modifying orders with protections for this account.
@property (nonatomic, readonly, strong) TradableProtectionEntryTypes * _Nonnull protectionEntryTypes;

/// Simple description of this object.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;

/// Starts updates for this account for all open positions; stops previous updates for this account, if such were in action.
///
/// \param type The type of the updates.
///
/// \param frequency The frequency of the updates.
- (void)startUpdatesWithType:(enum TradableUpdateType)type frequency:(enum TradableUpdateFrequency)frequency;

/// Stops updates for this account.
- (void)stopUpdates;

/// Sets update request for updates for this account. The request containing instrument IDs must be set after starting the updates.
///
/// \param request The request that should be used for updates. Replaces the previous request that was in use for this account.
- (void)setRequestForUpdates:(TradableUpdateRequest * _Nonnull)request;

/// Starts candle updates for this account; stops previous candle updates for this account, if such were in action.
///
/// \param instrument The instrument for which the updates should be started.
///
/// \param aggregation The aggregation (in minutes) for which the updates should be started.
///
/// \param from A Unix timestamp in milliseconds, specifies since when should the candles be requested. Cannot be greater than the current timestamp.
- (void)startCandleUpdatesForInstrument:(TradableInstrument * _Nonnull)instrument aggregation:(NSInteger)aggregation from:(uint64_t)from;

/// Stops candle updates for this account.
- (void)stopCandleUpdates;

/// Gets a snapshot of this account.
///
/// \param updateRequest The request that should be used to fetch the snapshot.
///
/// \param completionHandler The closure to be called when the response comes back, with an optional TradableAccountSnapshot object and an optional TradableError object.
- (void)getAccountSnapshotWithRequest:(TradableUpdateRequest * _Nonnull)updateRequest completionHandler:(void (^ _Null_unspecified)(TradableAccountSnapshot * _Nullable snapshot, TradableError * _Nullable error))completionHandler;

/// Gets prices for this account.
///
/// \param updateRequest The request that should be used to fetch the prices.
///
/// \param completionHandler The closure to be called when the response comes back, with an optional array of TradablePrice objects and an optional TradableError object.
- (void)getPricesWithRequest:(TradableUpdateRequest * _Nonnull)updateRequest completionHandler:(void (^ _Null_unspecified)(TradablePrices * _Nullable prices, TradableError * _Nullable error))completionHandler;

/// Gets this account's metrics.
///
/// \param completionHandler The closure to be called when the response comes back, with an optional array of TradableMetrics objects and an optional TradableError object.
- (void)getAccountMetrics:(void (^ _Null_unspecified)(TradableAccountMetrics * _Nullable accountMetrics, TradableError * _Nullable error))completionHandler;

/// Gets all orders for this account.
///
/// \param completionHandler The closure to be called when the response comes back, with an optional TradableOrders object and an optional TradableError object.
- (void)getOrders:(void (^ _Null_unspecified)(TradableOrders * _Nullable orders, TradableError * _Nullable error))completionHandler;

/// Gets pending orders for this account.
///
/// \param completionHandler The closure to be called when the response comes back, with an optional list of TradableOrder objects and an optional TradableError object.
- (void)getPendingOrders:(void (^ _Null_unspecified)(NSArray<TradableOrder *> * _Nullable pendingOrders, TradableError * _Nullable error))completionHandler;

/// Gets an order by ID for this account.
///
/// \param id The ID of the order that should be fetched.
///
/// \param completionHandler The closure to be called when the response comes back, with an optional TradableOrder object and an optional TradableError object.
- (void)getOrderById:(NSString * _Nonnull)id completionHandler:(void (^ _Null_unspecified)(TradableOrder * _Nullable order, TradableError * _Nullable error))completionHandler;

/// Issues a new order.
///
/// \param orderCommand The order command object, containing information about the order that should be issued.
///
/// \param completionHandler The closure to be called when the response comes back, with an optional TradableOrder object and an optional TradableError object. TradableOrder is an order that will have been created. Getting it back in the closure doesn't mean that the order has been executed; check its status in tradableOrdersUpdated delegate method.
- (void)issueNewOrderWithOrderCommand:(TradableOrderCommand * _Nonnull)orderCommand completionHandler:(void (^ _Null_unspecified)(TradableOrder * _Nullable order, TradableError * _Nullable error))completionHandler;

/// Issues a new market order.
///
/// \param instrument The instrument for which the order should be issued.
///
/// \param amount The amount of the order.
///
/// \param side The side of the order.
///
/// \param orderDelegate An optional TradableOrderStatusDelegate to notify when the order status changes.
///
/// \param completionHandler The closure to be called when the response comes back, with an optional TradableOrder object and an optional TradableError object. TradableOrder is an order that will have been created. Getting it back in the closure doesn't mean that the order has been executed; check its status in tradableOrdersUpdated delegate method.
- (void)issueNewMarketOrderForInstrument:(TradableInstrument * _Nonnull)instrument amount:(double)amount side:(enum TradableOrderSide)side orderDelegate:(id <TradableOrderStatusDelegate> _Nullable)orderDelegate completionHandler:(void (^ _Null_unspecified)(TradableOrder * _Nullable order, TradableError * _Nullable error))completionHandler;

/// Issues a new market order with protections.
///
/// \param instrument The instrument for which the order should be issued.
///
/// \param amount The amount of the order.
///
/// \param side The side of the order.
///
/// \param takeProfit An optional take profit protection.
///
/// \param stopLoss An optional stop loss protection.
///
/// \param orderDelegate An optional TradableOrderStatusDelegate to notify when the order status changes.
///
/// \param completionHandler The closure to be called when the response comes back, with an optional TradableOrder object and an optional TradableError object. TradableOrder is an order that will have been created. Getting it back in the closure doesn't mean that the order has been executed; check its status in tradableOrdersUpdated delegate method.
- (void)issueNewMarketOrderWithProtectionsForInstrument:(TradableInstrument * _Nonnull)instrument amount:(double)amount side:(enum TradableOrderSide)side takeProfit:(TradableOrderProtection * _Nullable)takeProfit stopLoss:(TradableOrderProtection * _Nullable)stopLoss orderDelegate:(id <TradableOrderStatusDelegate> _Nullable)orderDelegate completionHandler:(void (^ _Null_unspecified)(TradableOrder * _Nullable order, TradableError * _Nullable error))completionHandler;

/// Gets all positions for this account.
///
/// \param completionHandler The closure to be called when the response comes back, with an optional TradablePositions object and an optional TradableError object.
- (void)getPositions:(void (^ _Null_unspecified)(TradablePositions * _Nullable positions, TradableError * _Nullable error))completionHandler;

/// Gets open positions for this account.
///
/// \param completionHandler The closure to be called when the response comes back, with an optional list of TradablePosition objects and an optional TradableError object.
- (void)getOpenPositions:(void (^ _Null_unspecified)(NSArray<TradablePosition *> * _Nullable openPositions, TradableError * _Nullable error))completionHandler;

/// Gets a position by ID for this account.
///
/// \param id The ID of the position that should be fetched.
///
/// \param completionHandler The closure to be called when the response comes back, with an optional TradablePosition object and an optional TradableError object.
- (void)getPositionById:(NSString * _Nonnull)id completionHandler:(void (^ _Null_unspecified)(TradablePosition * _Nullable position, TradableError * _Nullable error))completionHandler;

/// Gets candles.\Remark 
///
/// This method is recursive.
///
/// \param candleRequest The candle request object containing information about the candles that should be fetched.
///
/// \param completionHandler The closure to be called when the response comes back, with an optional TradableCandles object and an optional TradableError object.
- (void)getCandlesWithRequest:(TradableCandleRequest * _Nonnull)candleRequest completionHandler:(void (^ _Null_unspecified)(TradableCandles * _Nullable candles, TradableError * _Nullable error))completionHandler;

/// Gets the last session's close.
///
/// \param lastSessionCloseRequest The request to be made.
///
/// \param completionHandler The closure to be called when the response comes back, with an optional list of TradableLastSessionClose objects and an optional TradableError object.
- (void)getLastSessionCloseWithRequest:(TradableLastSessionCloseRequest * _Nonnull)lastSessionCloseRequest completionHandler:(void (^ _Null_unspecified)(NSArray<TradableLastSessionClose *> * _Nullable lastSessionClose, TradableError * _Nullable error))completionHandler;

/// Searches for instruments that contain a specified phrase.
///
/// \param searchPhrase The phrase that the instruments will be searched for.
///
/// \param completionHandler The closure to be called when the response comes back, with an optional TradableInstrumentSearchResults object and an optional TradableError object.
- (void)searchForInstrumentsWithPhrase:(NSString * _Nonnull)searchPhrase completionHandler:(void (^ _Null_unspecified)(TradableInstrumentSearchResults * _Nullable searchResults, TradableError * _Nullable error))completionHandler;

/// Searches for instruments that contain a specified phrase. Returns the results using current searchDelegate's tradableInstrumentsFound method.
///
/// \param searchPhrase The phrase that the instruments will be searched for.
- (void)searchForInstrumentsWithPhrase:(NSString * _Nonnull)searchPhrase;

/// Gets instruments.
///
/// \param instrumentSearchRequest The request object containing a list of instrument IDs for which the instruments should be retrieved.
///
/// \param completionHandler The closure to be called when the response comes back, with an optional TradableInstrumentList object and an optional TradableError object.
- (void)getInstrumentsWithRequest:(TradableInstrumentSearchRequest * _Nonnull)instrumentSearchRequest completionHandler:(void (^ _Null_unspecified)(TradableInstrumentList * _Nullable instrumentList, TradableError * _Nullable error))completionHandler;

/// Creates an object with given parameters. Conforms to NSCoding protocol.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder;

/// Encoding method, conforming to NSCoding protocol.
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
@end



/// Contains a list of available accounts.
SWIFT_CLASS("_TtC11TradableAPI19TradableAccountList")
@interface TradableAccountList : NSObject

/// A list of available accounts.
@property (nonatomic, readonly, copy) NSArray<TradableAccount *> * _Nonnull accounts;

/// Simple description of this object.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end



/// The users balance and other account metrics. All amounts are in account currency.
SWIFT_CLASS("_TtC11TradableAPI22TradableAccountMetrics")
@interface TradableAccountMetrics : NSObject

/// The account these metrics belong to.
@property (nonatomic, readonly, strong) TradableAccount * _Nonnull forAccount;

/// Simple description of this object.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end



/// A full snapshot of the account. Contains all necessary information about the account.
SWIFT_CLASS("_TtC11TradableAPI23TradableAccountSnapshot")
@interface TradableAccountSnapshot : NSObject

/// The metrics of the account.
@property (nonatomic, readonly, strong) TradableAccountMetrics * _Nonnull metrics;

/// The orders belonging to the account.
@property (nonatomic, readonly, strong) TradableOrders * _Nonnull orders;

/// The positions belonging to the account.
@property (nonatomic, readonly, strong) TradablePositions * _Nonnull positions;

/// The tick prices for instrument IDs the request was made for.
@property (nonatomic, readonly, strong) TradablePrices * _Nonnull prices;

/// Simple description of this object.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// Aggregations used for candle requests.
typedef SWIFT_ENUM(NSInteger, TradableAggregation) {

/// One minute aggregation.
  TradableAggregationMINUTE = 1,

/// Five minutes aggregation.
  TradableAggregationFIVE_MINUTES = 5,

/// Fifteen minutes aggregation.
  TradableAggregationFIFTEEN_MINUTES = 15,

/// Thirty minutes aggregation.
  TradableAggregationTHIRTY_MINUTES = 30,

/// One hour aggregation.
  TradableAggregationHOUR = 60,

/// One day aggregation.
  TradableAggregationDAY = 1440,

/// One week aggregation.
  TradableAggregationWEEK = 10080,

/// One month aggregation.
  TradableAggregationMONTH = 40320,
};



/// Contains the amount to which a position is to be reduced.
SWIFT_CLASS("_TtC11TradableAPI14TradableAmount")
@interface TradableAmount : NSObject

/// The amount the position should be reduced to.
@property (nonatomic, readonly) double amount;

/// Simple description of this object.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;

/// Creates an object with given parameters.
- (nonnull instancetype)initWithAmount:(double)amount OBJC_DESIGNATED_INITIALIZER;
@end

@class UIImage;


/// Contains information about an app.
SWIFT_CLASS("_TtC11TradableAPI11TradableApp")
@interface TradableApp : NSObject

/// The name of the app.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;

/// The list of brokers for this app. An app can support a subset of the available brokers and this list will contain the brokers supported by this app.
@property (nonatomic, readonly, copy) NSArray<TradableBroker *> * _Nonnull brokers;

/// Simple description of this object.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;

/// Fetches app icon and caches it.
///
/// \param logoCompleted A closure containing an optional app icon.
- (void)getIcon:(void (^ _Null_unspecified)(UIImage * _Nullable icon))logoCompleted;
@end



/// A delegate protocol for authentication/authorization events.
SWIFT_PROTOCOL("_TtP11TradableAPI20TradableAuthDelegate_")
@protocol TradableAuthDelegate
@optional

/// A delegate hook for knowing when the API methods are ready to be used. Called when the access token has been updated for specified account.
- (void)tradableReady:(TradableAccount * _Nonnull)forAccount;

/// A delegate hook for knowing when the SDK has been deactivated and trading has been disabled. Called when the SDK has gone from an active state to inactive state (by removing all access tokens).
- (void)tradableDeactivated;

/// A delegate hook for authentication error handling.
///
/// \param error A TradableError object that contains detailed information about the error.
- (void)tradableAuthenticationError:(TradableError * _Nonnull)error;
@end



/// Provides information about a broker available in the system.
SWIFT_CLASS("_TtC11TradableAPI14TradableBroker")
@interface TradableBroker : NSObject

/// The name of the broker that the account belongs to.
@property (nonatomic, readonly, copy) NSString * _Nonnull brokerName;

/// The id of the broker that the account belongs to.
@property (nonatomic, readonly) NSInteger brokerId;

/// Indicates whether the broker serves live accounts or not.
@property (nonatomic, readonly) BOOL isLive;

/// Collection of logos for the broker.
@property (nonatomic, readonly, strong) TradableBrokerLogos * _Nonnull brokerLogos;

/// Simple description of this object.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end



/// Contains a set of various broker logos for specific account.
SWIFT_CLASS("_TtC11TradableAPI19TradableBrokerLogos")
@interface TradableBrokerLogos : NSObject <NSCoding>

/// Simple description of this object.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;

/// Fetches a small broker logo (20px high) and caches it.
///
/// \param logoCompleted A closure containing an optional small broker logo for this account.
- (void)getSmallBrokerLogo:(void (^ _Null_unspecified)(UIImage * _Nullable logoImg))logoCompleted;

/// Fetches a broker logo on light background (100px high) and caches it.
///
/// \param logoCompleted A closure containing an optional broker logo on light background for this account.
- (void)getOnLightBrokerLogo:(void (^ _Null_unspecified)(UIImage * _Nullable logoImg))logoCompleted;

/// Fetches a broker logo on dark background (100px high) and caches it.
///
/// \param logoCompleted A closure containing an optional broker logo on dark background for this account.
- (void)getOnDarkBrokerLogo:(void (^ _Null_unspecified)(UIImage * _Nullable logoImg))logoCompleted;

/// Fetches a broker logo in SVG format and caches it.
///
/// \param logoCompleted A closure containing an optional broker logo in SVG format for this account.
- (void)getSvgBrokerLogo:(void (^ _Null_unspecified)(UIImage * _Nullable logoImg))logoCompleted;

/// Fetches a broker solid logo in SVG format and caches it.
///
/// \param logoCompleted A closure containing an optional broker solid logo in SVG format for this account.
- (void)getSvgSolidBrokerLogo:(void (^ _Null_unspecified)(UIImage * _Nullable logoImg))logoCompleted;

/// Creates an object with given parameters. Conforms to NSCoding protocol.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder;

/// Encoding method, conforming to NSCoding protocol.
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
@end



/// Historic candle class containing necessary candle information.
SWIFT_CLASS("_TtC11TradableAPI14TradableCandle")
@interface TradableCandle : NSObject

/// The Unix timestamp in milliseconds for the start of the candle.
@property (nonatomic, readonly) uint64_t timeStamp;

/// The open price for the candle.
@property (nonatomic, readonly) double open;

/// The close price for the candle.
@property (nonatomic, readonly) double close;

/// The highest price the candle has reached.
@property (nonatomic, readonly) double high;

/// The lowest price the candle has reached.
@property (nonatomic, readonly) double low;

/// The accumulated volume, in millions.
@property (nonatomic, readonly) double volume;

/// Simple description of this object.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;

/// Creates an object with given parameters.
- (nonnull instancetype)initWithTimeStamp:(uint64_t)timeStamp open:(double)open close:(double)close high:(double)high low:(double)low volume:(double)volume OBJC_DESIGNATED_INITIALIZER;
@end

@class TradableIndicatorRequest;


/// A historic candle request class, used for requesting historic data.
SWIFT_CLASS("_TtC11TradableAPI21TradableCandleRequest")
@interface TradableCandleRequest : NSObject

/// The unique instrument identifier to get candles for.
@property (nonatomic, readonly, copy) NSString * _Nonnull instrumentId;

/// The start of the candle range; Unix timestamp in milliseconds.
@property (nonatomic, readonly) uint64_t from;

/// The end of the candle range; Unix timestamp in milliseconds.
@property (nonatomic, readonly) uint64_t to;

/// The aggregation interval in minutes.
@property (nonatomic, readonly) NSInteger aggregation;

/// An optional indicator request.
@property (nonatomic, readonly, strong) TradableIndicatorRequest * _Nullable indicatorRequest;

/// Simple description of this object.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;

/// Creates an object with given parameters.
- (nonnull instancetype)initWithInstrumentId:(NSString * _Nonnull)instrumentId from:(uint64_t)from to:(uint64_t)to aggregation:(NSInteger)aggregation OBJC_DESIGNATED_INITIALIZER;

/// Creates an object with given parameters.
- (nonnull instancetype)initWithInstrumentId:(NSString * _Nonnull)instrumentId fromDate:(NSDate * _Nonnull)fromDate toDate:(NSDate * _Nonnull)toDate aggregation:(NSInteger)aggregation OBJC_DESIGNATED_INITIALIZER;

/// Creates an object with given parameters.
- (nonnull instancetype)initWithInstrumentId:(NSString * _Nonnull)instrumentId from:(uint64_t)from to:(uint64_t)to aggregation:(NSInteger)aggregation indicatorRequest:(TradableIndicatorRequest * _Nullable)indicatorRequest OBJC_DESIGNATED_INITIALIZER;
@end

@class TradableIndicator;


/// Contains a list of candles and a list of indicators that the API response contains.
SWIFT_CLASS("_TtC11TradableAPI15TradableCandles")
@interface TradableCandles : NSObject

/// A list of candles.
@property (nonatomic, copy) NSArray<TradableCandle *> * _Nonnull candles;

/// A list of indicators.
@property (nonatomic, copy) NSArray<TradableIndicator *> * _Nonnull indicators;

/// The account these candles belong to.
@property (nonatomic, readonly, strong) TradableAccount * _Nonnull forAccount;

/// Simple description of this object.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end



/// A request for creating a demo account of the given type and an authentication granting access to it.
SWIFT_CLASS("_TtC11TradableAPI36TradableDemoAPIAuthenticationRequest")
@interface TradableDemoAPIAuthenticationRequest : NSObject

/// The app key for authentication.
@property (nonatomic, readonly, copy) NSString * _Nonnull appKey;

/// The id of the app that is requesting access.
@property (nonatomic, readonly) uint64_t appId;

/// The type of demo account.
@property (nonatomic, readonly) enum TradableDemoAccountType type;

/// Simple description of this object.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;

/// Creates an object with given parameters.
- (nonnull instancetype)initWithAppKey:(NSString * _Nonnull)appKey appId:(uint64_t)appId type:(enum TradableDemoAccountType)type OBJC_DESIGNATED_INITIALIZER;
@end


/// Possible types of Tradable demo accounts.
typedef SWIFT_ENUM(NSInteger, TradableDemoAccountType) {

/// Account with Forex instruments.
  TradableDemoAccountTypeFOREX = 0,

/// Account with stocks.
  TradableDemoAccountTypeSTOCKS = 1,
};



/// The delegate protocol for the Edit Order widget.
SWIFT_PROTOCOL("_TtP11TradableAPI25TradableEditOrderDelegate_")
@protocol TradableEditOrderDelegate

/// Edit Order delegate hook for knowing when the widget has been dismissed.
- (void)tradableEditOrderDismissed;
@end

@class NSHTTPURLResponse;
enum TradableErrorType : NSInteger;


/// TradableError contains detailed description about an error delivered in the API response.
SWIFT_CLASS("_TtC11TradableAPI13TradableError")
@interface TradableError : NSObject

/// A raw http response returned with the error.
@property (nonatomic, readonly, strong) NSHTTPURLResponse * _Nonnull rawHttpResponse;

/// The error code.
@property (nonatomic, readonly) NSInteger errorCode;

/// A description of the error.
@property (nonatomic, readonly, copy) NSString * _Nonnull errorDescription;

/// The type of the error.
@property (nonatomic, readonly) enum TradableErrorType errorType;

/// The account this error regards. Might be nil.
@property (nonatomic, readonly, strong) TradableAccount * _Nullable forAccount;

/// Simple description of this object.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// Possible error types.
typedef SWIFT_ENUM(NSInteger, TradableErrorType) {

/// Error emerged in snapshot updates.
  TradableErrorTypeSNAPSHOT_UPDATE = 0,

/// Error emerged in orders updates.
  TradableErrorTypeORDERS_UPDATE = 1,

/// Error emerged in positions updates.
  TradableErrorTypePOSITIONS_UPDATE = 2,

/// Error emerged in prices updates.
  TradableErrorTypePRICES_UPDATE = 3,

/// Error emerged in candles updates.
  TradableErrorTypeCANDLES_UPDATE = 4,

/// The source of the error is unknown, or at least not related to the updates.
  TradableErrorTypeUNKNOWN = 5,
};



/// A delegate protocol for events such as receiving account metrics or errors. Provides a variety of hooks.
SWIFT_PROTOCOL("_TtP11TradableAPI22TradableEventsDelegate_")
@protocol TradableEventsDelegate
@optional

/// A delegate hook for knowing when the account list has been updated.
///
/// \param accounts A TradableAccountList object that contains a list of available accounts.
- (void)tradableAccountListUpdated:(TradableAccountList * _Nonnull)accounts;

/// A delegate hook for account metrics updates.
///
/// \param accountMetrics A TradableAccountMetrics object that contains information about current account metrics.
- (void)tradableAccountMetricsUpdated:(TradableAccountMetrics * _Nonnull)accountMetrics;

/// A delegate hook for orders updates.
///
/// \param orders A TradableOrders object that contains a list of orders.
- (void)tradableOrdersUpdated:(TradableOrders * _Nonnull)orders;

/// A delegate hook for positions updates.
///
/// \param positions A TradablePositions object that contains a list of positions.
- (void)tradablePositionsUpdated:(TradablePositions * _Nonnull)positions;

/// A delegate hook for prices updates.
///
/// \param prices A TradablePrices object containing a dictionary of instrument IDs to TradablePrice objects.
- (void)tradablePricesUpdated:(TradablePrices * _Nonnull)prices;

/// A delegate hook for candles updates.
///
/// \param candles A TradableCandles object that contains a list of candles.
- (void)tradableCandlesUpdated:(TradableCandles * _Nonnull)candles;

/// A delegate hook for updates error handling.
///
/// \param error A TradableError object that contains detailed information about the error.
- (void)tradableUpdateError:(TradableError * _Nonnull)error;
@end

@class TradableIndicatorPlot;
@class TradableIndicatorParam;


/// Provides indicator data.
SWIFT_CLASS("_TtC11TradableAPI17TradableIndicator")
@interface TradableIndicator : NSObject

/// The name of the indicator.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;

/// A list of plots of the indicator.
@property (nonatomic, readonly, copy) NSArray<TradableIndicatorPlot *> * _Nonnull plots;

/// A list of used params.
@property (nonatomic, readonly, copy) NSArray<TradableIndicatorParam *> * _Nonnull usedParams;

/// Simple description of this object.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

@class TradableIndicatorInfoParam;


/// Provides information regarding an indicator.
SWIFT_CLASS("_TtC11TradableAPI21TradableIndicatorInfo")
@interface TradableIndicatorInfo : NSObject

/// The name of the indicator.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;

/// A short description of the indicator.
@property (nonatomic, readonly, copy) NSString * _Nonnull shortDescription;

/// A list of indicator parameters.
@property (nonatomic, readonly, copy) NSArray<TradableIndicatorInfoParam *> * _Nonnull params;

/// Simple description of this object.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end



/// Describes an allowed indicator parameter.
SWIFT_CLASS("_TtC11TradableAPI26TradableIndicatorInfoParam")
@interface TradableIndicatorInfoParam : NSObject

/// The name of the parameter.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;

/// The type of the parameter.
@property (nonatomic, readonly, copy) NSString * _Nonnull type;

/// A default value of the parameter.
@property (nonatomic, readonly, strong) id _Nonnull defaultValue;

/// An optional list of allowed values that this parameter can take.
@property (nonatomic, readonly, copy) NSArray * _Nullable allowedValues;

/// Simple description of this object.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end



/// Describes a used indicator parameter.
SWIFT_CLASS("_TtC11TradableAPI22TradableIndicatorParam")
@interface TradableIndicatorParam : NSObject

/// The name of the parameter.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;

/// The type of the parameter.
@property (nonatomic, readonly, copy) NSString * _Nonnull type;

/// The value of the parameter.
@property (nonatomic, readonly, strong) id _Nonnull value;

/// Simple description of this object.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;

/// Creates an object with given parameters.
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name type:(NSString * _Nonnull)type value:(id _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
@end



/// Provides information about an indicator plot.
SWIFT_CLASS("_TtC11TradableAPI21TradableIndicatorPlot")
@interface TradableIndicatorPlot : NSObject

/// The name of the plot.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;

/// The id of the plot.
@property (nonatomic, readonly) NSUInteger id;

/// Simple description of this object.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

@class TradableRequestedIndicator;


/// A part of historic candle request regarding requested indicators.
SWIFT_CLASS("_TtC11TradableAPI24TradableIndicatorRequest")
@interface TradableIndicatorRequest : NSObject

/// A list of requested indicators.
@property (nonatomic, readonly, copy) NSArray<TradableRequestedIndicator *> * _Nonnull requestedIndicators;

/// An indication of whether the response should contain the candles.
@property (nonatomic, readonly) BOOL returnCandles;

/// Simple description of this object.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;

/// Creates an object with given parameters.
- (nonnull instancetype)initWithRequestedIndicators:(NSArray<TradableRequestedIndicator *> * _Nonnull)requestedIndicators returnCandles:(BOOL)returnCandles OBJC_DESIGNATED_INITIALIZER;
@end

enum TradableInstrumentType : NSInteger;


/// Contains instrument data, such as symbol, type, precision and more.
SWIFT_CLASS("_TtC11TradableAPI18TradableInstrument")
@interface TradableInstrument : NSObject

/// The unique identifier for this instrument.
@property (nonatomic, readonly, copy) NSString * _Nonnull id;

/// The symbol that is used to represent the instrument in the brokerage account.
@property (nonatomic, readonly, copy) NSString * _Nonnull brokerageAccountSymbol;

/// The recommended number of decimals when formatting the instrument price.
@property (nonatomic, readonly) NSInteger decimals;

/// The instrument display name.
@property (nonatomic, readonly, copy) NSString * _Nonnull displayName;

/// The exchange this instrument is traded on. May be not available if the exchange is unknown.
@property (nonatomic, readonly, copy) NSString * _Nullable exchangeId;

/// The maximum long order amount for this instrument.
@property (nonatomic, readonly) double maxAmount;

/// The maximum short order amount for this instrument. If 0, the instrument cannot be shorted.
@property (nonatomic, readonly) double maxShortAmount;

/// The minimum order amount for this instrument.
@property (nonatomic, readonly) double minAmount;

/// True if order amounts must be multiples of the minimum amount.
@property (nonatomic, readonly) BOOL multipleOfMinAmount;

/// The quote currency of the instrument
@property (nonatomic, readonly, copy) NSString * _Nonnull quoteCurrency;

/// A short description of the instrument.
@property (nonatomic, readonly, copy) NSString * _Nonnull shortDescription;

/// The instrument symbol. The Tradable symbol for this instrument.
@property (nonatomic, readonly, copy) NSString * _Nonnull symbol;

/// The instrument type.
@property (nonatomic, readonly) enum TradableInstrumentType type;

/// Simple description of this object.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end



/// Contains a list of instruments.
SWIFT_CLASS("_TtC11TradableAPI22TradableInstrumentList")
@interface TradableInstrumentList : NSObject

/// A list of instruments.
@property (nonatomic, readonly, copy) NSArray<TradableInstrument *> * _Nonnull instruments;

/// Simple description of this object.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// Possible options for account's instruments retrieval.
typedef SWIFT_ENUM(NSInteger, TradableInstrumentRetrieval) {

/// Specifies that 'GET /instruments' should be used to get a complete list of account instruments.
  TradableInstrumentRetrievalFULL_INSTRUMENT_LIST = 0,

/// Specifies that 'POST /instrumentSearch' should be used to search for instruments, and information about the instruments can be retrieved using 'POST /instruments'
  TradableInstrumentRetrievalSEARCH_2_CHARACTERS_MINIMUM = 1,
};



/// Ues the query to perform a remote search with the broker. This should only be used if the account doesn't return all the instruments in the GET /instruments call.
SWIFT_CLASS("_TtC11TradableAPI29TradableInstrumentSearchQuery")
@interface TradableInstrumentSearchQuery : NSObject

/// The query used in an instrument search.
@property (nonatomic, readonly, copy) NSString * _Nonnull query;

/// Simple description of this object.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;

/// Creates an object with given parameters.
- (nonnull instancetype)initWithQuery:(NSString * _Nonnull)query OBJC_DESIGNATED_INITIALIZER;
@end



/// An instrument search request containing a list of IDs of instruments for which to get detailed information.
SWIFT_CLASS("_TtC11TradableAPI31TradableInstrumentSearchRequest")
@interface TradableInstrumentSearchRequest : NSObject

/// The list of instruments' IDs for which to get detailed instrument information.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull instrumentIds;

/// Simple description of this object.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;

/// Creates an object with given parameters.
- (nonnull instancetype)initWithInstrumentIds:(NSArray<NSString *> * _Nonnull)instrumentIds OBJC_DESIGNATED_INITIALIZER;
@end



/// Instrument information returned as part of the instrument search.
SWIFT_CLASS("_TtC11TradableAPI30TradableInstrumentSearchResult")
@interface TradableInstrumentSearchResult : NSObject

/// The unique identifier for this instrument.
@property (nonatomic, readonly, copy) NSString * _Nonnull instrumentId;

/// The instrument symbol. The tradable symbol for this instrument.
@property (nonatomic, readonly, copy) NSString * _Nonnull symbol;

/// The symbol that is used to represent the instrument in the brokerage account.
@property (nonatomic, readonly, copy) NSString * _Nonnull brokerageAccountSymbol;

/// The instrument display name.
@property (nonatomic, readonly, copy) NSString * _Nonnull displayName;

/// A short description of the instrument. May be nil.
@property (nonatomic, readonly, copy) NSString * _Nullable shortDescription;

/// Simple description of this object.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end



/// The results of an instrument search.
SWIFT_CLASS("_TtC11TradableAPI31TradableInstrumentSearchResults")
@interface TradableInstrumentSearchResults : NSObject

/// The instruments matching the search query.
@property (nonatomic, readonly, copy) NSArray<TradableInstrumentSearchResult *> * _Nonnull instruments;

/// he maximum number of results were returned, this means that some matches may not be displayed, and that you should refine the search in order to see them.
@property (nonatomic, readonly) BOOL moreResultsAvailable;

/// The search query that the results matched.
@property (nonatomic, readonly, copy) NSString * _Nonnull forQuery;

/// Simple description of this object.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end



/// The delegate protocol for the Instrument Selector widget.
SWIFT_PROTOCOL("_TtP11TradableAPI34TradableInstrumentSelectorDelegate_")
@protocol TradableInstrumentSelectorDelegate

/// Instrument Selector delegate hook for knowing what instrument search result was selected. Called when the widget has been dismissed.
- (void)tradableInstrumentSelectorDismissed:(TradableInstrumentSearchResult * _Nullable)instrumentSearchResult;
@end


/// Available instrument types.
typedef SWIFT_ENUM(NSInteger, TradableInstrumentType) {

/// Foreign exchange.
  TradableInstrumentTypeFOREX = 0,

/// Contract for difference.
  TradableInstrumentTypeCFD = 1,

/// Equity.
  TradableInstrumentTypeEQUITY = 2,

/// Exchange-traded fund.
  TradableInstrumentTypeETF = 3,

/// American depositary receipt.
  TradableInstrumentTypeADR = 4,

/// Spread bet.
  TradableInstrumentTypeSPREAD_BET = 5,

/// An unknown instrument type.
  TradableInstrumentTypeUNKNOWN = 6,
};



/// Provides information about last session's close price for instrument.
SWIFT_CLASS("_TtC11TradableAPI24TradableLastSessionClose")
@interface TradableLastSessionClose : NSObject

/// The instrument ID.
@property (nonatomic, readonly, copy) NSString * _Nonnull instrumentId;

/// The last session's close price.
@property (nonatomic, readonly) double lastSessionClose;

/// The timestamp of the last session.
@property (nonatomic, readonly) uint64_t timestamp;

/// Simple description of this object.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end



/// A request class used for getting last session's close.
SWIFT_CLASS("_TtC11TradableAPI31TradableLastSessionCloseRequest")
@interface TradableLastSessionCloseRequest : NSObject

/// The list of instruments' IDs for which the close prices should be retrieved.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull instrumentIds;

/// Simple description of this object.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;

/// Creates an object with given parameters.
- (nonnull instancetype)initWithInstrumentIds:(NSArray<NSString *> * _Nonnull)instrumentIds OBJC_DESIGNATED_INITIALIZER;
@end



/// The margin factor for volumes in this margin band.
SWIFT_CLASS("_TtC11TradableAPI18TradableMarginBand")
@interface TradableMarginBand : NSObject

/// The lowest amount for this margin band.
@property (nonatomic, readonly) double lowerBound;

/// The margin factor, multiply this by the volume to get the margin requirement. This is only an estimate of the margin requirement, the trading system may require a different margin.
@property (nonatomic, readonly) double marginFactor;

/// Simple description of this object.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end



/// A collection of margin factors for an instrument, can be used to estimate the margin requirement before placing an order.
SWIFT_CLASS("_TtC11TradableAPI19TradableMarginBands")
@interface TradableMarginBands : NSObject

/// A list of margin bands.
@property (nonatomic, readonly, copy) NSArray<TradableMarginBand *> * _Nonnull marginBands;

/// Simple description of this object.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;

/// Calculates the estimated margin requirement for these margin bands and given quantity.
///
/// \param forQuantity The quantity of an order to calculate margin estimation for.
- (double)calculateRequiredMarginEstimateForQuantity:(double)quantity;
@end



/// Tradable OS user. Might have a couple of accounts assigned to it.
SWIFT_CLASS("_TtC11TradableAPI14TradableOSUser")
@interface TradableOSUser : NSObject

/// Unique identifier of the user.
@property (nonatomic, readonly, copy) NSString * _Nonnull userId;

/// Name of the user.
@property (nonatomic, readonly, copy) NSString * _Nonnull userName;

/// Simple description of this object.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;

/// Fetches a thumbnail (40x40 pixels) and caches it.
///
/// \param thumbCompleted A closure containing the thumbnail for this user.
- (void)getUserThumbnail:(void (^ _Null_unspecified)(UIImage * _Nonnull userImg))thumbCompleted;

/// Fetches a picture (160x160 pixels) and caches it.
///
/// \param picCompleted A closure containing the picture for this user.
- (void)getUserPicture:(void (^ _Null_unspecified)(UIImage * _Nonnull userImg))picCompleted;
@end

enum TradableOrderType : NSInteger;
enum TradableOrderStatus : NSInteger;
@class TradableOrderModification;


/// Contains the order data, such as unique ID, instrument ID, amount, type, price, status and more.
SWIFT_CLASS("_TtC11TradableAPI13TradableOrder")
@interface TradableOrder : NSObject

/// Amount of the order.
@property (nonatomic, readonly) double amount;

/// Unix timestamp in milliseconds of the order creation.
@property (nonatomic, readonly) uint64_t creationDate;

/// Unique identifier of the order.
@property (nonatomic, readonly, copy) NSString * _Nonnull id;

/// The unique identifier for the order's instrument.
@property (nonatomic, readonly, copy) NSString * _Nonnull instrumentId;

/// Order side.
@property (nonatomic, readonly) enum TradableOrderSide side;

/// Order type.
@property (nonatomic, readonly) enum TradableOrderType type;

/// Order status.
@property (nonatomic, readonly) enum TradableOrderStatus status;

/// The price the limit or stop order will trigger at. For market orders it will be 0.
@property (nonatomic, readonly) double price;

/// Identifiers of the affected positions. Might not be available.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable affectedPositionsIds;

/// The take profit attached to the order. Will be nil if no take profit is attached to the order.
@property (nonatomic, readonly, strong) TradableOrderProtection * _Nullable takeProfit;

/// The stop loss attached to the order. Will be nil if no stop loss is attached to the order.
@property (nonatomic, readonly, strong) TradableOrderProtection * _Nullable stopLoss;

/// Simple description of this object.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;

/// Modifies the order.
///
/// \param orderModification An order modification object containing details about modifications to be done to this order.
///
/// \param completionHandler A closure to be called when the response comes back, with an optional TradableError object.
- (void)modifyWithOrderModification:(TradableOrderModification * _Nonnull)orderModification completionHandler:(void (^ _Null_unspecified)(TradableError * _Nullable error))completionHandler;

/// Cancels the order.
///
/// \param completionHandler A closure to be called when the response comes back, with an optional TradableError object.
- (void)cancel:(void (^ _Null_unspecified)(TradableError * _Nullable error))completionHandler;

/// Fetches the positions that have been affected by this order.
///
/// \param completionHandler A closure containing an optional list of affected positions.
- (void)getAffectedPositions:(void (^ _Null_unspecified)(NSArray<TradablePosition *> * _Nullable affectedPositions))completionHandler;

/// Fetches the last known order state.
- (TradableOrder * _Nonnull)getLatestState;

/// Gets the instrument for this order.
///
/// \param completionHandler A closure to be called when the response comes back, with an optional TradableInstrument object and an optional TradableError object.
- (void)getInstrument:(void (^ _Null_unspecified)(TradableInstrument * _Nullable instrument, TradableError * _Nullable error))completionHandler;
@end



/// Contains order data needed when issuing a new order.
SWIFT_CLASS("_TtC11TradableAPI20TradableOrderCommand")
@interface TradableOrderCommand : NSObject

/// The unique identifier for order's instrument.
@property (nonatomic, readonly, copy) NSString * _Nonnull instrumentId;

/// Amount of the order.
@property (nonatomic, readonly) double amount;

/// Trigger price for the order. Use 0.0 for market orders.
@property (nonatomic, readonly) double price;

/// Order side.
@property (nonatomic, readonly) enum TradableOrderSide side;

/// /Order type.
@property (nonatomic, readonly) enum TradableOrderType type;

/// The take profit attached to the order. This is only supported for some account types.
@property (nonatomic, readonly, strong) TradableOrderProtection * _Nullable takeProfit;

/// The stop loss attached to the order. This is only supported for some account types.
@property (nonatomic, readonly, strong) TradableOrderProtection * _Nullable stopLoss;

/// Simple description of this object.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;

/// Creates an object with given parameters.
- (nonnull instancetype)initWithInstrumentId:(NSString * _Nonnull)instrumentId amount:(double)amount price:(double)price side:(enum TradableOrderSide)side type:(enum TradableOrderType)type OBJC_DESIGNATED_INITIALIZER;

/// Creates an object with given parameters.
- (nonnull instancetype)initWithInstrumentId:(NSString * _Nonnull)instrumentId amount:(double)amount price:(double)price side:(enum TradableOrderSide)side type:(enum TradableOrderType)type takeProfit:(TradableOrderProtection * _Nullable)takeProfit stopLoss:(TradableOrderProtection * _Nullable)stopLoss OBJC_DESIGNATED_INITIALIZER;
@end



/// The delegate protocol for the Order Entry widget.
SWIFT_PROTOCOL("_TtP11TradableAPI26TradableOrderEntryDelegate_")
@protocol TradableOrderEntryDelegate

/// Order Entry delegate hook for knowing if an order was successfully placed. Called when the widget has been dismissed.
- (void)tradableOrderEntryDismissed:(TradableOrder * _Nullable)order;
@end



/// Contains information with which the order will be modified.
SWIFT_CLASS("_TtC11TradableAPI25TradableOrderModification")
@interface TradableOrderModification : NSObject

/// A price the order should be modified with.
@property (nonatomic, readonly) double price;

/// Simple description of this object.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;

/// Creates an object with given parameters.
- (nonnull instancetype)initWithPrice:(double)price OBJC_DESIGNATED_INITIALIZER;
@end

enum TradableProtectionEntryType : NSInteger;


/// A protection specified on an order.
SWIFT_CLASS("_TtC11TradableAPI23TradableOrderProtection")
@interface TradableOrderProtection : NSObject

/// Simple description of this object.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;

/// Creates an object with given parameters.
- (nonnull instancetype)initWithEntryType:(enum TradableProtectionEntryType)entryType value:(double)value OBJC_DESIGNATED_INITIALIZER;
@end


/// Possible sides of order.
typedef SWIFT_ENUM(NSInteger, TradableOrderSide) {

/// Buy (long) side.
  TradableOrderSideBUY = 0,

/// Sell (short) side.
  TradableOrderSideSELL = 1,
};


/// Possible statuses of order.
typedef SWIFT_ENUM(NSInteger, TradableOrderStatus) {

/// The order with this status is pending; it's not a final status, the order can be cancelled or executed.
  TradableOrderStatusPENDING = 0,

/// The order with this status has been executed; it's a final status.
  TradableOrderStatusEXECUTED = 1,

/// The order with this status has been cancelled; it's a final status.
  TradableOrderStatusCANCELLED = 2,
};



/// A delegate protocol for getting notifications about order status changes.
SWIFT_PROTOCOL("_TtP11TradableAPI27TradableOrderStatusDelegate_")
@protocol TradableOrderStatusDelegate
@optional

/// A delegate hook for getting order status changes.
///
/// \param order A TradableOrder object whose status changed.
- (void)tradableOrderStatusChanged:(TradableOrder * _Nonnull)order;
@end



/// A definition of the capabilities of an order type.
SWIFT_CLASS("_TtC11TradableAPI20TradableOrderSupport")
@interface TradableOrderSupport : NSObject <NSCoding>

/// Specifies if the order type supports attached take profit distance.
@property (nonatomic, readonly) BOOL takeProfit;

/// Specifies if the order type supports attached stop loss distance.
@property (nonatomic, readonly) BOOL stopLoss;

/// Simple description of this object.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;

/// Creates an object with given parameters. Conforms to NSCoding protocol.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder;

/// Encoding method, conforming to NSCoding protocol.
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
@end


/// Available types of orders.
typedef SWIFT_ENUM(NSInteger, TradableOrderType) {

/// Market order type.
  TradableOrderTypeMARKET = 0,

/// Limit order type.
  TradableOrderTypeLIMIT = 1,

/// Stop order type.
  TradableOrderTypeSTOP = 2,
};



/// Contains lists of pending, recently cancelled and recently executed orders.
SWIFT_CLASS("_TtC11TradableAPI14TradableOrders")
@interface TradableOrders : NSObject

/// A list of pending orders.
@property (nonatomic, copy) NSArray<TradableOrder *> * _Nonnull pending;

/// A list of recently cancelled orders.
@property (nonatomic, copy) NSArray<TradableOrder *> * _Nonnull recentlyCancelled;

/// A list of recently executed orders.
@property (nonatomic, copy) NSArray<TradableOrder *> * _Nonnull recentlyExecuted;

/// The account these orders belong to.
@property (nonatomic, readonly, strong) TradableAccount * _Nonnull forAccount;

/// Simple description of this object.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

enum TradableSingleProtection : NSInteger;
@class TradableProtection;


/// Contains the position data, such as unique ID, instrument ID, amount, side, open/closed profit and more.
SWIFT_CLASS("_TtC11TradableAPI16TradablePosition")
@interface TradablePosition : NSObject

/// Unique identifier of the position.
@property (nonatomic, readonly, copy) NSString * _Nonnull id;

/// The unique identifier for the position's instrument.
@property (nonatomic, readonly, copy) NSString * _Nonnull instrumentId;

/// Unix timestamp in milliseconds of the position creation.
@property (nonatomic, readonly) uint64_t creationTime;

/// Open price of the position (volume-weighted average).
@property (nonatomic, readonly) double openPrice;

/// Amount of the position.
@property (nonatomic, readonly) double amount;

/// Side of the position.
@property (nonatomic, readonly) enum TradableOrderSide side;

/// Unix timestamp in milliseconds of the position last modification.
@property (nonatomic, readonly) uint64_t lastModified;

/// Simple description of this object.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;

/// Reduces a position size to the specified amount.
///
/// \param amount The amount that the position size should be reduced to.
///
/// \param completionHandler A closure to be called when the response comes back, with an optional TradableError object.
- (void)reduceSizeTo:(TradableAmount * _Nonnull)amount completionHandler:(void (^ _Null_unspecified)(TradableError * _Nullable error))completionHandler;

/// Closes this position.
///
/// \param completionHandler A closure to be called when the response comes back, with an optional TradableError object.
- (void)close:(void (^ _Null_unspecified)(TradableError * _Nullable error))completionHandler;

/// Adds or modifies a single protection.
///
/// \param protectionType The type of protection that should be added or modified.
///
/// \param withOrderModification The order modification object containing the changes to be made to a protection.
///
/// \param completionHandler A closure to be called when the response comes back, with an optional TradableError object.
- (void)modifySingleProtectionOfType:(enum TradableSingleProtection)protectionType withOrderModification:(TradableOrderModification * _Nonnull)orderModification completionHandler:(void (^ _Null_unspecified)(TradableError * _Nullable error))completionHandler;

/// Cancels a single protection.
///
/// \param protectionType The type of protection that should be cancelled.
///
/// \param completionHandler A closure to be called when the response comes back, with optional TradableError object.
- (void)cancelSingleProtectionOfType:(enum TradableSingleProtection)protectionType completionHandler:(void (^ _Null_unspecified)(TradableError * _Nullable error))completionHandler;

/// Adds or modifies protections.
///
/// \param protections The protection object containing the changes to be made to protections.
///
/// \param completionHandler A closure to be called when the response comes back, with an optional TradableError object.
- (void)modifyProtections:(TradableProtection * _Nonnull)protections completionHandler:(void (^ _Null_unspecified)(TradableError * _Nullable error))completionHandler;

/// Cancels protections.
///
/// \param completionHandler A closure to be called when the response comes back, with an optional TradableError object.
- (void)cancelProtections:(void (^ _Null_unspecified)(TradableError * _Nullable error))completionHandler;

/// Gets the instrument for this position.
///
/// \param completionHandler A closure to be called when the response comes back, with an optional TradableInstrument object and an optional TradableError object.
- (void)getInstrument:(void (^ _Null_unspecified)(TradableInstrument * _Nullable instrument, TradableError * _Nullable error))completionHandler;
@end



/// The delegate protocol for the Position Detail widget.
SWIFT_PROTOCOL("_TtP11TradableAPI30TradablePositionDetailDelegate_")
@protocol TradablePositionDetailDelegate

/// Position Detail delegate hook for knowing when the widget has been dismissed.
- (void)tradablePositionDetailDismissed;
@end



/// Contains lists of open and recently closed positions.
SWIFT_CLASS("_TtC11TradableAPI17TradablePositions")
@interface TradablePositions : NSObject

/// A list of open positions.
@property (nonatomic, readonly, copy) NSArray<TradablePosition *> * _Nonnull open;

/// A list of recently closed positions.
@property (nonatomic, readonly, copy) NSArray<TradablePosition *> * _Nonnull recentlyClosed;

/// The account these positions belong to.
@property (nonatomic, readonly, strong) TradableAccount * _Nonnull forAccount;

/// Simple description of this object.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;

/// Closes all positions.
///
/// \param completionHandler The closure to be called when the response comes back, with optional TradableError object.
- (void)closeAll:(void (^ _Null_unspecified)(TradableError * _Nullable error))completionHandler;
@end



/// Contains the ask and bid price for an instrument ID, alongside with a spread in pips.
SWIFT_CLASS("_TtC11TradableAPI13TradablePrice")
@interface TradablePrice : NSObject

/// The unique identifier for the price's instrument.
@property (nonatomic, readonly, copy) NSString * _Nonnull instrumentId;

/// The current value of one pip for one unit of this instrument converted to the account currency. If the instrument doesn't have pip precision this field contains the change in account currency when the price of the instrument moves one unit (1.0).
@property (nonatomic, readonly) double pipValue;

/// Optional object that may be included when 'includeMarginFactors' is true. Contains information that can be used to estimate margin requirement before placing an order. Not all trading systems expose their instrument leverage so this field may not be present for all brokers.
@property (nonatomic, readonly, strong) TradableMarginBands * _Nullable marginBands;

/// Simple description of this object.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end



/// Contains a dictionary of instrument IDs to TradablePrice objects.
SWIFT_CLASS("_TtC11TradableAPI14TradablePrices")
@interface TradablePrices : NSObject

/// A dictionary of instrument IDs to TradablePrice objects.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, TradablePrice *> * _Nonnull prices;

/// The account these prices belong to.
@property (nonatomic, readonly, strong) TradableAccount * _Nonnull forAccount;

/// Simple description of this object.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;

/// Returns the dictionary values as an array.
- (NSArray<TradablePrice *> * _Nonnull)getPrices;

/// Returns an optional TradablePrice object for specified instrument ID.
- (TradablePrice * _Nullable)getPriceForInstrumentId:(NSString * _Nonnull)instrumentId;
@end



/// Contains take profit and stop loss levels.
SWIFT_CLASS("_TtC11TradableAPI18TradableProtection")
@interface TradableProtection : NSObject

/// Stop loss price.
@property (nonatomic, readonly) double stopLoss;

/// Take profit price.
@property (nonatomic, readonly) double takeProfit;

/// Simple description of this object.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;

/// Creates an object with given parameters.
- (nonnull instancetype)initWithStopLoss:(double)stopLoss takeProfit:(double)takeProfit OBJC_DESIGNATED_INITIALIZER;
@end


/// An enumeration defining how protections on orders are entered - as a distance from the order price or as an absolute price.
typedef SWIFT_ENUM(NSInteger, TradableProtectionEntryType) {

/// The protection is entered as an absolute price.
  TradableProtectionEntryTypeABSOLUTE = 0,

/// The protection is entered as a distance from the order price.
  TradableProtectionEntryTypeDISTANCE = 1,
};



/// Contains a list of protection entry types.
SWIFT_CLASS("_TtC11TradableAPI28TradableProtectionEntryTypes")
@interface TradableProtectionEntryTypes : NSObject <NSCoding>

/// Simple description of this object.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;

/// Creates an object with given parameters. Conforms to NSCoding protocol.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder;

/// Encoding method, conforming to NSCoding protocol.
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
@end



/// A part of indicator request with details on requested indicators.
SWIFT_CLASS("_TtC11TradableAPI26TradableRequestedIndicator")
@interface TradableRequestedIndicator : NSObject

/// The name of the requested indicator.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;

/// A list of params to be used when calculating the indicator.
@property (nonatomic, readonly, copy) NSArray<TradableIndicatorParam *> * _Nonnull params;

/// Simple description of this object.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;

/// Creates an object with given parameters.
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name params:(NSArray<TradableIndicatorParam *> * _Nonnull)params OBJC_DESIGNATED_INITIALIZER;
@end



/// A delegate protocol for getting back the search results.
SWIFT_PROTOCOL("_TtP11TradableAPI22TradableSearchDelegate_")
@protocol TradableSearchDelegate
@optional

/// A delegate hook for getting back the instrument search results.
///
/// \param searchResults A TradableinstrumentSearchResults objects containing results that matched the search phrase.
- (void)tradableInstrumentSearchResultsReceived:(TradableInstrumentSearchResults * _Nonnull)searchResults;
@end


/// Available protection types.
typedef SWIFT_ENUM(NSInteger, TradableSingleProtection) {

/// Take profit protection.
  TradableSingleProtectionTAKEPROFIT = 0,

/// Stop loss protection.
  TradableSingleProtectionSTOPLOSS = 1,
};


/// Possible track configurations.
typedef SWIFT_ENUM(NSInteger, TradableTrackConfiguration) {

/// Positions for the same instrument are on the same track.
  TradableTrackConfigurationSINGLE = 0,

/// Positions for the same instrument can be on different tracks.
  TradableTrackConfigurationMULTI = 1,

/// Positions for the same instrument can be on different tracks, but hedging is not allowed.
  TradableTrackConfigurationMULTI_NO_HEDGE = 2,
};


/// Update frequency for managed mode.
typedef SWIFT_ENUM(NSInteger, TradableUpdateFrequency) {

/// A new request is made as soon as the response comes back.
  TradableUpdateFrequencyRealTime = 0,

/// A new request is made one second after the response comes back.
  TradableUpdateFrequencyOneSecond = 1,

/// A new request is made two seconds after the response comes back.
  TradableUpdateFrequencyTwoSeconds = 2,

/// A new request is made three seconds after the response comes back.
  TradableUpdateFrequencyThreeSeconds = 3,
};



/// A request that should be sent to get prices or full account snapshot.
SWIFT_CLASS("_TtC11TradableAPI21TradableUpdateRequest")
@interface TradableUpdateRequest : NSObject

/// A list of instruments' IDs for which you want prices returned in the response.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull instrumentIds;

/// If this is true, response will contain prices for all instruments you have open positions in.
@property (nonatomic, readonly) BOOL allOpenPositions;

/// If this is true, each price object will contain a Margin Bands object. Defaults to false.
@property (nonatomic, readonly) BOOL includeMarginFactors;

/// Simple description of this object.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;

/// Creates an object with given parameters.
- (nonnull instancetype)initWithInstrumentIds:(NSArray<NSString *> * _Nonnull)instrumentIds allOpenPositions:(BOOL)allOpenPositions includeMarginFactors:(BOOL)includeMarginFactors OBJC_DESIGNATED_INITIALIZER;

/// A convenience initializer that creates TradableUpdateRequest object with a list of instruments.
- (nonnull instancetype)initWithInstruments:(NSArray<TradableInstrument *> * _Nonnull)instruments allOpenPositions:(BOOL)allOpenPositions includeMarginFactors:(BOOL)includeMarginFactors;
@end


/// Update type for managed mode.
typedef SWIFT_ENUM(NSInteger, TradableUpdateType) {

/// Updates for account snapshot, orders, positions and prices. A list of instrument IDs for which the prices will be fetched should be specified for this update type. If the list is empty, no prices will be retrieved.
  TradableUpdateTypeFull = 0,

/// Updates just for account positions.
  TradableUpdateTypePositions = 1,

/// Updates just for account orders.
  TradableUpdateTypeOrders = 2,

/// Updates just for tick prices. A list of instrument IDs for which the prices will be fetched should be specified for this update type. If the list is empty, no prices will be retrieved.
  TradableUpdateTypePrices = 3,
};



/// A helper class providing methods for easy price/pip conversion and more.
SWIFT_CLASS("_TtC11TradableAPI17TradableUtilities")
@interface TradableUtilities : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// An enumeration for utility class errors.
typedef SWIFT_ENUM(NSInteger, TradableUtilitiesError) {

/// Unsupported instrument error.
  TradableUtilitiesErrorUnsupportedInstrument = 0,
};
static NSString * _Nonnull const TradableUtilitiesErrorDomain = @"TradableAPI.TradableUtilitiesError";


@interface UIView (SWIFT_EXTENSION(TradableAPI))
@end

#pragma clang diagnostic pop
